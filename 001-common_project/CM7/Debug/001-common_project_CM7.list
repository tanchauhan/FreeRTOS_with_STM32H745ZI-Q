
001-common_project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005454  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080056f4  080056f4  000156f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005834  08005834  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08005834  08005834  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005834  08005834  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  24000000  0800583c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000063ec  24000018  08005854  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24006404  08005854  00026404  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001055b  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000251c  00000000  00000000  000305a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00032ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  00033908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a231  00000000  00000000  00034608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010491  00000000  00000000  0006e839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017db35  00000000  00000000  0007ecca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fc7ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003978  00000000  00000000  001fc850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000018 	.word	0x24000018
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080056dc 	.word	0x080056dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400001c 	.word	0x2400001c
 80002dc:	080056dc 	.word	0x080056dc

080002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80002e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000370 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80002ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80002ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80002f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80002f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80002f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80002f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80002fa:	d332      	bcc.n	8000362 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80002fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80002fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000300:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000302:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000304:	d314      	bcc.n	8000330 <_CheckCase2>

08000306 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000306:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000308:	19d0      	adds	r0, r2, r7
 800030a:	bf00      	nop

0800030c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800030c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000310:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000314:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000316:	d005      	beq.n	8000324 <_CSDone>
        LDRB     R3,[R1], #+1
 8000318:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800031c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000320:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000322:	d1f3      	bne.n	800030c <_LoopCopyStraight>

08000324 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000324:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000328:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800032a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800032c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800032e:	4770      	bx	lr

08000330 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000330:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000332:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000334:	d319      	bcc.n	800036a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000336:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000338:	1b12      	subs	r2, r2, r4

0800033a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800033a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800033e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000342:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000344:	d1f9      	bne.n	800033a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000346:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000348:	d005      	beq.n	8000356 <_No2ChunkNeeded>

0800034a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800034a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800034e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000352:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000354:	d1f9      	bne.n	800034a <_LoopCopyAfterWrapAround>

08000356 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000356:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800035a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800035c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800035e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000360:	4770      	bx	lr

08000362 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000362:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000364:	3801      	subs	r0, #1
        CMP      R0,R2
 8000366:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000368:	d2cd      	bcs.n	8000306 <_Case4>

0800036a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800036a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800036c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800036e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000370:	24005230 	.word	0x24005230

08000374 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000378:	4b3d      	ldr	r3, [pc, #244]	; (8000470 <SystemInit+0xfc>)
 800037a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800037e:	4a3c      	ldr	r2, [pc, #240]	; (8000470 <SystemInit+0xfc>)
 8000380:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000384:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000388:	4b39      	ldr	r3, [pc, #228]	; (8000470 <SystemInit+0xfc>)
 800038a:	691b      	ldr	r3, [r3, #16]
 800038c:	4a38      	ldr	r2, [pc, #224]	; (8000470 <SystemInit+0xfc>)
 800038e:	f043 0310 	orr.w	r3, r3, #16
 8000392:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000394:	4b37      	ldr	r3, [pc, #220]	; (8000474 <SystemInit+0x100>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	f003 030f 	and.w	r3, r3, #15
 800039c:	2b06      	cmp	r3, #6
 800039e:	d807      	bhi.n	80003b0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003a0:	4b34      	ldr	r3, [pc, #208]	; (8000474 <SystemInit+0x100>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f023 030f 	bic.w	r3, r3, #15
 80003a8:	4a32      	ldr	r2, [pc, #200]	; (8000474 <SystemInit+0x100>)
 80003aa:	f043 0307 	orr.w	r3, r3, #7
 80003ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003b0:	4b31      	ldr	r3, [pc, #196]	; (8000478 <SystemInit+0x104>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a30      	ldr	r2, [pc, #192]	; (8000478 <SystemInit+0x104>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003bc:	4b2e      	ldr	r3, [pc, #184]	; (8000478 <SystemInit+0x104>)
 80003be:	2200      	movs	r2, #0
 80003c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003c2:	4b2d      	ldr	r3, [pc, #180]	; (8000478 <SystemInit+0x104>)
 80003c4:	681a      	ldr	r2, [r3, #0]
 80003c6:	492c      	ldr	r1, [pc, #176]	; (8000478 <SystemInit+0x104>)
 80003c8:	4b2c      	ldr	r3, [pc, #176]	; (800047c <SystemInit+0x108>)
 80003ca:	4013      	ands	r3, r2
 80003cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003ce:	4b29      	ldr	r3, [pc, #164]	; (8000474 <SystemInit+0x100>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	f003 0308 	and.w	r3, r3, #8
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d007      	beq.n	80003ea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003da:	4b26      	ldr	r3, [pc, #152]	; (8000474 <SystemInit+0x100>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f023 030f 	bic.w	r3, r3, #15
 80003e2:	4a24      	ldr	r2, [pc, #144]	; (8000474 <SystemInit+0x100>)
 80003e4:	f043 0307 	orr.w	r3, r3, #7
 80003e8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003ea:	4b23      	ldr	r3, [pc, #140]	; (8000478 <SystemInit+0x104>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003f0:	4b21      	ldr	r3, [pc, #132]	; (8000478 <SystemInit+0x104>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80003f6:	4b20      	ldr	r3, [pc, #128]	; (8000478 <SystemInit+0x104>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80003fc:	4b1e      	ldr	r3, [pc, #120]	; (8000478 <SystemInit+0x104>)
 80003fe:	4a20      	ldr	r2, [pc, #128]	; (8000480 <SystemInit+0x10c>)
 8000400:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000402:	4b1d      	ldr	r3, [pc, #116]	; (8000478 <SystemInit+0x104>)
 8000404:	4a1f      	ldr	r2, [pc, #124]	; (8000484 <SystemInit+0x110>)
 8000406:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000408:	4b1b      	ldr	r3, [pc, #108]	; (8000478 <SystemInit+0x104>)
 800040a:	4a1f      	ldr	r2, [pc, #124]	; (8000488 <SystemInit+0x114>)
 800040c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800040e:	4b1a      	ldr	r3, [pc, #104]	; (8000478 <SystemInit+0x104>)
 8000410:	2200      	movs	r2, #0
 8000412:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <SystemInit+0x104>)
 8000416:	4a1c      	ldr	r2, [pc, #112]	; (8000488 <SystemInit+0x114>)
 8000418:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800041a:	4b17      	ldr	r3, [pc, #92]	; (8000478 <SystemInit+0x104>)
 800041c:	2200      	movs	r2, #0
 800041e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000420:	4b15      	ldr	r3, [pc, #84]	; (8000478 <SystemInit+0x104>)
 8000422:	4a19      	ldr	r2, [pc, #100]	; (8000488 <SystemInit+0x114>)
 8000424:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000426:	4b14      	ldr	r3, [pc, #80]	; (8000478 <SystemInit+0x104>)
 8000428:	2200      	movs	r2, #0
 800042a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800042c:	4b12      	ldr	r3, [pc, #72]	; (8000478 <SystemInit+0x104>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a11      	ldr	r2, [pc, #68]	; (8000478 <SystemInit+0x104>)
 8000432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000436:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000438:	4b0f      	ldr	r3, [pc, #60]	; (8000478 <SystemInit+0x104>)
 800043a:	2200      	movs	r2, #0
 800043c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800043e:	4b13      	ldr	r3, [pc, #76]	; (800048c <SystemInit+0x118>)
 8000440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000442:	4a12      	ldr	r2, [pc, #72]	; (800048c <SystemInit+0x118>)
 8000444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000448:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800044a:	4b11      	ldr	r3, [pc, #68]	; (8000490 <SystemInit+0x11c>)
 800044c:	681a      	ldr	r2, [r3, #0]
 800044e:	4b11      	ldr	r3, [pc, #68]	; (8000494 <SystemInit+0x120>)
 8000450:	4013      	ands	r3, r2
 8000452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000456:	d202      	bcs.n	800045e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <SystemInit+0x124>)
 800045a:	2201      	movs	r2, #1
 800045c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800045e:	4b0f      	ldr	r3, [pc, #60]	; (800049c <SystemInit+0x128>)
 8000460:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000464:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	e000ed00 	.word	0xe000ed00
 8000474:	52002000 	.word	0x52002000
 8000478:	58024400 	.word	0x58024400
 800047c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000480:	02020200 	.word	0x02020200
 8000484:	01ff0000 	.word	0x01ff0000
 8000488:	01010280 	.word	0x01010280
 800048c:	580000c0 	.word	0x580000c0
 8000490:	5c001000 	.word	0x5c001000
 8000494:	ffff0000 	.word	0xffff0000
 8000498:	51008108 	.word	0x51008108
 800049c:	52004000 	.word	0x52004000

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08a      	sub	sp, #40	; 0x28
 80004a4:	af02      	add	r7, sp, #8

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a6:	f000 fa6f 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004aa:	f000 f87d 	bl	80005a8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80004ae:	4b38      	ldr	r3, [pc, #224]	; (8000590 <main+0xf0>)
 80004b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b4:	4a36      	ldr	r2, [pc, #216]	; (8000590 <main+0xf0>)
 80004b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004be:	4b34      	ldr	r3, [pc, #208]	; (8000590 <main+0xf0>)
 80004c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 fdad 	bl	800102c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004d2:	2100      	movs	r1, #0
 80004d4:	2000      	movs	r0, #0
 80004d6:	f000 fdc3 	bl	8001060 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004de:	61fb      	str	r3, [r7, #28]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004e0:	bf00      	nop
 80004e2:	4b2b      	ldr	r3, [pc, #172]	; (8000590 <main+0xf0>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d104      	bne.n	80004f8 <main+0x58>
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	1e5a      	subs	r2, r3, #1
 80004f2:	61fa      	str	r2, [r7, #28]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	dcf4      	bgt.n	80004e2 <main+0x42>
if ( timeout < 0 )
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	da01      	bge.n	8000502 <main+0x62>
{
Error_Handler();
 80004fe:	f000 f9e3 	bl	80008c8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000502:	f000 f8bb 	bl	800067c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

DWT_CTRL |= ( 1<<0 );
 8000506:	4b23      	ldr	r3, [pc, #140]	; (8000594 <main+0xf4>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a22      	ldr	r2, [pc, #136]	; (8000594 <main+0xf4>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6013      	str	r3, [r2, #0]

SEGGER_SYSVIEW_Conf();
 8000512:	f003 f89f 	bl	8003654 <SEGGER_SYSVIEW_Conf>
SEGGER_SYSVIEW_Start();
 8000516:	f004 fac7 	bl	8004aa8 <SEGGER_SYSVIEW_Start>

status = xTaskCreate(task1_handler, "Task--1", 200, NULL,2, &task1_handle);
 800051a:	f107 030c 	add.w	r3, r7, #12
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2302      	movs	r3, #2
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	2300      	movs	r3, #0
 8000526:	22c8      	movs	r2, #200	; 0xc8
 8000528:	491b      	ldr	r1, [pc, #108]	; (8000598 <main+0xf8>)
 800052a:	481c      	ldr	r0, [pc, #112]	; (800059c <main+0xfc>)
 800052c:	f001 fe18 	bl	8002160 <xTaskCreate>
 8000530:	61b8      	str	r0, [r7, #24]
configASSERT(status == pdPASS);
 8000532:	69bb      	ldr	r3, [r7, #24]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d00c      	beq.n	8000552 <main+0xb2>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800053c:	b672      	cpsid	i
 800053e:	f383 8811 	msr	BASEPRI, r3
 8000542:	f3bf 8f6f 	isb	sy
 8000546:	f3bf 8f4f 	dsb	sy
 800054a:	b662      	cpsie	i
 800054c:	617b      	str	r3, [r7, #20]
            "	isb														\n"\
            "	dsb														\n"\
            "	cpsie i													\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800054e:	bf00      	nop
 8000550:	e7fe      	b.n	8000550 <main+0xb0>

status = xTaskCreate(task2_handler, "Task--2", 200, NULL,2, &task2_handle);
 8000552:	f107 0308 	add.w	r3, r7, #8
 8000556:	9301      	str	r3, [sp, #4]
 8000558:	2302      	movs	r3, #2
 800055a:	9300      	str	r3, [sp, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	22c8      	movs	r2, #200	; 0xc8
 8000560:	490f      	ldr	r1, [pc, #60]	; (80005a0 <main+0x100>)
 8000562:	4810      	ldr	r0, [pc, #64]	; (80005a4 <main+0x104>)
 8000564:	f001 fdfc 	bl	8002160 <xTaskCreate>
 8000568:	61b8      	str	r0, [r7, #24]
configASSERT(status == pdPASS);
 800056a:	69bb      	ldr	r3, [r7, #24]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d00c      	beq.n	800058a <main+0xea>
        __asm volatile
 8000570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000574:	b672      	cpsid	i
 8000576:	f383 8811 	msr	BASEPRI, r3
 800057a:	f3bf 8f6f 	isb	sy
 800057e:	f3bf 8f4f 	dsb	sy
 8000582:	b662      	cpsie	i
 8000584:	613b      	str	r3, [r7, #16]
    }
 8000586:	bf00      	nop
 8000588:	e7fe      	b.n	8000588 <main+0xe8>
// start the freeRTOS scheduler
vTaskStartScheduler();
 800058a:	f001 ffd7 	bl	800253c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058e:	e7fe      	b.n	800058e <main+0xee>
 8000590:	58024400 	.word	0x58024400
 8000594:	e0001000 	.word	0xe0001000
 8000598:	080056f4 	.word	0x080056f4
 800059c:	08000859 	.word	0x08000859
 80005a0:	080056fc 	.word	0x080056fc
 80005a4:	08000891 	.word	0x08000891

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b09c      	sub	sp, #112	; 0x70
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b2:	224c      	movs	r2, #76	; 0x4c
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 f888 	bl	80056cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2220      	movs	r2, #32
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 f882 	bl	80056cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005c8:	2004      	movs	r0, #4
 80005ca:	f000 fd5d 	bl	8001088 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ce:	2300      	movs	r3, #0
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	4b28      	ldr	r3, [pc, #160]	; (8000674 <SystemClock_Config+0xcc>)
 80005d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005d6:	4a27      	ldr	r2, [pc, #156]	; (8000674 <SystemClock_Config+0xcc>)
 80005d8:	f023 0301 	bic.w	r3, r3, #1
 80005dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <SystemClock_Config+0xcc>)
 80005e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	603b      	str	r3, [r7, #0]
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <SystemClock_Config+0xd0>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f0:	4a21      	ldr	r2, [pc, #132]	; (8000678 <SystemClock_Config+0xd0>)
 80005f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <SystemClock_Config+0xd0>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000604:	bf00      	nop
 8000606:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <SystemClock_Config+0xd0>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800060e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000612:	d1f8      	bne.n	8000606 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000618:	2301      	movs	r3, #1
 800061a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2340      	movs	r3, #64	; 0x40
 800061e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000620:	2300      	movs	r3, #0
 8000622:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fd87 	bl	800113c <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000634:	f000 f948 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	233f      	movs	r3, #63	; 0x3f
 800063a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2101      	movs	r1, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f99b 	bl	8001998 <HAL_RCC_ClockConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000668:	f000 f92e 	bl	80008c8 <Error_Handler>
  }
}
 800066c:	bf00      	nop
 800066e:	3770      	adds	r7, #112	; 0x70
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	58000400 	.word	0x58000400
 8000678:	58024800 	.word	0x58024800

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08c      	sub	sp, #48	; 0x30
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000692:	4b6b      	ldr	r3, [pc, #428]	; (8000840 <MX_GPIO_Init+0x1c4>)
 8000694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000698:	4a69      	ldr	r2, [pc, #420]	; (8000840 <MX_GPIO_Init+0x1c4>)
 800069a:	f043 0304 	orr.w	r3, r3, #4
 800069e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006a2:	4b67      	ldr	r3, [pc, #412]	; (8000840 <MX_GPIO_Init+0x1c4>)
 80006a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b0:	4b63      	ldr	r3, [pc, #396]	; (8000840 <MX_GPIO_Init+0x1c4>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	4a62      	ldr	r2, [pc, #392]	; (8000840 <MX_GPIO_Init+0x1c4>)
 80006b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c0:	4b5f      	ldr	r3, [pc, #380]	; (8000840 <MX_GPIO_Init+0x1c4>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	617b      	str	r3, [r7, #20]
 80006cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	4b5c      	ldr	r3, [pc, #368]	; (8000840 <MX_GPIO_Init+0x1c4>)
 80006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d4:	4a5a      	ldr	r2, [pc, #360]	; (8000840 <MX_GPIO_Init+0x1c4>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006de:	4b58      	ldr	r3, [pc, #352]	; (8000840 <MX_GPIO_Init+0x1c4>)
 80006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ec:	4b54      	ldr	r3, [pc, #336]	; (8000840 <MX_GPIO_Init+0x1c4>)
 80006ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006f2:	4a53      	ldr	r2, [pc, #332]	; (8000840 <MX_GPIO_Init+0x1c4>)
 80006f4:	f043 0302 	orr.w	r3, r3, #2
 80006f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006fc:	4b50      	ldr	r3, [pc, #320]	; (8000840 <MX_GPIO_Init+0x1c4>)
 80006fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	4b4d      	ldr	r3, [pc, #308]	; (8000840 <MX_GPIO_Init+0x1c4>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000710:	4a4b      	ldr	r2, [pc, #300]	; (8000840 <MX_GPIO_Init+0x1c4>)
 8000712:	f043 0308 	orr.w	r3, r3, #8
 8000716:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800071a:	4b49      	ldr	r3, [pc, #292]	; (8000840 <MX_GPIO_Init+0x1c4>)
 800071c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000720:	f003 0308 	and.w	r3, r3, #8
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000728:	4b45      	ldr	r3, [pc, #276]	; (8000840 <MX_GPIO_Init+0x1c4>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800072e:	4a44      	ldr	r2, [pc, #272]	; (8000840 <MX_GPIO_Init+0x1c4>)
 8000730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000734:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000738:	4b41      	ldr	r3, [pc, #260]	; (8000840 <MX_GPIO_Init+0x1c4>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	f244 0101 	movw	r1, #16385	; 0x4001
 800074c:	483d      	ldr	r0, [pc, #244]	; (8000844 <MX_GPIO_Init+0x1c8>)
 800074e:	f000 fc39 	bl	8000fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000752:	2332      	movs	r3, #50	; 0x32
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000762:	230b      	movs	r3, #11
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4836      	ldr	r0, [pc, #216]	; (8000848 <MX_GPIO_Init+0x1cc>)
 800076e:	f000 fa79 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000772:	2386      	movs	r3, #134	; 0x86
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000782:	230b      	movs	r3, #11
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	482f      	ldr	r0, [pc, #188]	; (800084c <MX_GPIO_Init+0x1d0>)
 800078e:	f000 fa69 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000792:	f244 0301 	movw	r3, #16385	; 0x4001
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4826      	ldr	r0, [pc, #152]	; (8000844 <MX_GPIO_Init+0x1c8>)
 80007ac:	f000 fa5a 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c2:	230b      	movs	r3, #11
 80007c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	481d      	ldr	r0, [pc, #116]	; (8000844 <MX_GPIO_Init+0x1c8>)
 80007ce:	f000 fa49 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007e4:	2307      	movs	r3, #7
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4818      	ldr	r0, [pc, #96]	; (8000850 <MX_GPIO_Init+0x1d4>)
 80007f0:	f000 fa38 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80007f4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000806:	230a      	movs	r3, #10
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	480e      	ldr	r0, [pc, #56]	; (800084c <MX_GPIO_Init+0x1d0>)
 8000812:	f000 fa27 	bl	8000c64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000816:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000828:	230b      	movs	r3, #11
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4808      	ldr	r0, [pc, #32]	; (8000854 <MX_GPIO_Init+0x1d8>)
 8000834:	f000 fa16 	bl	8000c64 <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3730      	adds	r7, #48	; 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	58024400 	.word	0x58024400
 8000844:	58020400 	.word	0x58020400
 8000848:	58020800 	.word	0x58020800
 800084c:	58020000 	.word	0x58020000
 8000850:	58020c00 	.word	0x58020c00
 8000854:	58021800 	.word	0x58021800

08000858 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000860:	f001 ff7c 	bl	800275c <xTaskGetTickCount>
 8000864:	4603      	mov	r3, r0
 8000866:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000868:	4807      	ldr	r0, [pc, #28]	; (8000888 <task1_handler+0x30>)
 800086a:	f004 fe7d 	bl	8005568 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_GREEN_PIN);
 800086e:	2101      	movs	r1, #1
 8000870:	4806      	ldr	r0, [pc, #24]	; (800088c <task1_handler+0x34>)
 8000872:	f000 fbc0 	bl	8000ff6 <HAL_GPIO_TogglePin>
		//HAL_Delay(1000);
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(1000));
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800087e:	4618      	mov	r0, r3
 8000880:	f001 fdd4 	bl	800242c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green led");
 8000884:	e7f0      	b.n	8000868 <task1_handler+0x10>
 8000886:	bf00      	nop
 8000888:	08005704 	.word	0x08005704
 800088c:	58020c00 	.word	0x58020c00

08000890 <task2_handler>:
	}
}

static void task2_handler(void* parameters)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	TickType_t last_wakeup_time;
	last_wakeup_time = xTaskGetTickCount();
 8000898:	f001 ff60 	bl	800275c <xTaskGetTickCount>
 800089c:	4603      	mov	r3, r0
 800089e:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <task2_handler+0x30>)
 80008a2:	f004 fe61 	bl	8005568 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, LED_RED_PIN);
 80008a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <task2_handler+0x34>)
 80008ac:	f000 fba3 	bl	8000ff6 <HAL_GPIO_TogglePin>
		//HAL_Delay(500);
		vTaskDelayUntil(&last_wakeup_time, pdMS_TO_TICKS(500));
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fdb7 	bl	800242c <xTaskDelayUntil>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red led");
 80008be:	e7ef      	b.n	80008a0 <task2_handler+0x10>
 80008c0:	08005718 	.word	0x08005718
 80008c4:	58020c00 	.word	0x58020c00

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_MspInit+0x30>)
 80008dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008e0:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_MspInit+0x30>)
 80008e2:	f043 0302 	orr.w	r3, r3, #2
 80008e6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_MspInit+0x30>)
 80008ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80008f0:	f003 0302 	and.w	r3, r3, #2
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 80008f8:	f002 fadc 	bl	8002eb4 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	58024400 	.word	0x58024400

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800096c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000938:	f7ff fd1c 	bl	8000374 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	; (8000974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	; (8000980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f004 fe71 	bl	8005648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fd9b 	bl	80004a0 <main>
  bx  lr
 800096a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800096c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000970:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000974:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 8000978:	0800583c 	.word	0x0800583c
  ldr r2, =_sbss
 800097c:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 8000980:	24006404 	.word	0x24006404

08000984 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC3_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098e:	2003      	movs	r0, #3
 8000990:	f000 f936 	bl	8000c00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000994:	f001 f9b6 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8000998:	4602      	mov	r2, r0
 800099a:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_Init+0x68>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	0a1b      	lsrs	r3, r3, #8
 80009a0:	f003 030f 	and.w	r3, r3, #15
 80009a4:	4913      	ldr	r1, [pc, #76]	; (80009f4 <HAL_Init+0x6c>)
 80009a6:	5ccb      	ldrb	r3, [r1, r3]
 80009a8:	f003 031f 	and.w	r3, r3, #31
 80009ac:	fa22 f303 	lsr.w	r3, r2, r3
 80009b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009b2:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <HAL_Init+0x68>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_Init+0x6c>)
 80009bc:	5cd3      	ldrb	r3, [r2, r3]
 80009be:	f003 031f 	and.w	r3, r3, #31
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	fa22 f303 	lsr.w	r3, r2, r3
 80009c8:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <HAL_Init+0x70>)
 80009ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009cc:	4a0b      	ldr	r2, [pc, #44]	; (80009fc <HAL_Init+0x74>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d2:	2000      	movs	r0, #0
 80009d4:	f000 f814 	bl	8000a00 <HAL_InitTick>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e002      	b.n	80009e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009e2:	f7ff ff77 	bl	80008d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	58024400 	.word	0x58024400
 80009f4:	080057ec 	.word	0x080057ec
 80009f8:	24000004 	.word	0x24000004
 80009fc:	24000000 	.word	0x24000000

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a08:	4b15      	ldr	r3, [pc, #84]	; (8000a60 <HAL_InitTick+0x60>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e021      	b.n	8000a58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <HAL_InitTick+0x64>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <HAL_InitTick+0x60>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f90d 	bl	8000c4a <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a48:	f000 f8e5 	bl	8000c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x68>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2400000c 	.word	0x2400000c
 8000a64:	24000000 	.word	0x24000000
 8000a68:	24000008 	.word	0x24000008

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	24000034 	.word	0x24000034

08000a84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_GetREVID+0x14>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	0c1b      	lsrs	r3, r3, #16
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	5c001000 	.word	0x5c001000

08000a9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <__NVIC_SetPriorityGrouping+0x40>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab2:	68ba      	ldr	r2, [r7, #8]
 8000ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab8:	4013      	ands	r3, r2
 8000aba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x40>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000ed00 	.word	0xe000ed00
 8000ae0:	05fa0000 	.word	0x05fa0000

08000ae4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae8:	4b04      	ldr	r3, [pc, #16]	; (8000afc <__NVIC_GetPriorityGrouping+0x18>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	0a1b      	lsrs	r3, r3, #8
 8000aee:	f003 0307 	and.w	r3, r3, #7
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	6039      	str	r1, [r7, #0]
 8000b0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	db0a      	blt.n	8000b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	490c      	ldr	r1, [pc, #48]	; (8000b4c <__NVIC_SetPriority+0x4c>)
 8000b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b1e:	0112      	lsls	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	440b      	add	r3, r1
 8000b24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b28:	e00a      	b.n	8000b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4908      	ldr	r1, [pc, #32]	; (8000b50 <__NVIC_SetPriority+0x50>)
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	f003 030f 	and.w	r3, r3, #15
 8000b36:	3b04      	subs	r3, #4
 8000b38:	0112      	lsls	r2, r2, #4
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	440b      	add	r3, r1
 8000b3e:	761a      	strb	r2, [r3, #24]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e100 	.word	0xe000e100
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b089      	sub	sp, #36	; 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f003 0307 	and.w	r3, r3, #7
 8000b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	f1c3 0307 	rsb	r3, r3, #7
 8000b6e:	2b04      	cmp	r3, #4
 8000b70:	bf28      	it	cs
 8000b72:	2304      	movcs	r3, #4
 8000b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	3304      	adds	r3, #4
 8000b7a:	2b06      	cmp	r3, #6
 8000b7c:	d902      	bls.n	8000b84 <NVIC_EncodePriority+0x30>
 8000b7e:	69fb      	ldr	r3, [r7, #28]
 8000b80:	3b03      	subs	r3, #3
 8000b82:	e000      	b.n	8000b86 <NVIC_EncodePriority+0x32>
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43da      	mvns	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	401a      	ands	r2, r3
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba6:	43d9      	mvns	r1, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	4313      	orrs	r3, r2
         );
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3724      	adds	r7, #36	; 0x24
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
	...

08000bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bcc:	d301      	bcc.n	8000bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00f      	b.n	8000bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bd2:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <SysTick_Config+0x40>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bda:	210f      	movs	r1, #15
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	f7ff ff8e 	bl	8000b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <SysTick_Config+0x40>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bea:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <SysTick_Config+0x40>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	e000e010 	.word	0xe000e010

08000c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff ff47 	bl	8000a9c <__NVIC_SetPriorityGrouping>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b086      	sub	sp, #24
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	60b9      	str	r1, [r7, #8]
 8000c20:	607a      	str	r2, [r7, #4]
 8000c22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c24:	f7ff ff5e 	bl	8000ae4 <__NVIC_GetPriorityGrouping>
 8000c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	6978      	ldr	r0, [r7, #20]
 8000c30:	f7ff ff90 	bl	8000b54 <NVIC_EncodePriority>
 8000c34:	4602      	mov	r2, r0
 8000c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c3a:	4611      	mov	r1, r2
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ff5f 	bl	8000b00 <__NVIC_SetPriority>
}
 8000c42:	bf00      	nop
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ffb2 	bl	8000bbc <SysTick_Config>
 8000c58:	4603      	mov	r3, r0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c72:	4b89      	ldr	r3, [pc, #548]	; (8000e98 <HAL_GPIO_Init+0x234>)
 8000c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c76:	e194      	b.n	8000fa2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8186 	beq.w	8000f9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d005      	beq.n	8000ca8 <HAL_GPIO_Init+0x44>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d130      	bne.n	8000d0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cde:	2201      	movs	r2, #1
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	f003 0201 	and.w	r2, r3, #1
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69ba      	ldr	r2, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d017      	beq.n	8000d46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	689a      	ldr	r2, [r3, #8]
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d123      	bne.n	8000d9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	08da      	lsrs	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3208      	adds	r2, #8
 8000d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	691a      	ldr	r2, [r3, #16]
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	f003 0307 	and.w	r3, r3, #7
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	08da      	lsrs	r2, r3, #3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3208      	adds	r2, #8
 8000d94:	69b9      	ldr	r1, [r7, #24]
 8000d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0203 	and.w	r2, r3, #3
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	69ba      	ldr	r2, [r7, #24]
 8000dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80e0 	beq.w	8000f9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ddc:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <HAL_GPIO_Init+0x238>)
 8000dde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000de2:	4a2e      	ldr	r2, [pc, #184]	; (8000e9c <HAL_GPIO_Init+0x238>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dec:	4b2b      	ldr	r3, [pc, #172]	; (8000e9c <HAL_GPIO_Init+0x238>)
 8000dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dfa:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <HAL_GPIO_Init+0x23c>)
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	089b      	lsrs	r3, r3, #2
 8000e00:	3302      	adds	r3, #2
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e08:	69fb      	ldr	r3, [r7, #28]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a20      	ldr	r2, [pc, #128]	; (8000ea4 <HAL_GPIO_Init+0x240>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d052      	beq.n	8000ecc <HAL_GPIO_Init+0x268>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a1f      	ldr	r2, [pc, #124]	; (8000ea8 <HAL_GPIO_Init+0x244>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d031      	beq.n	8000e92 <HAL_GPIO_Init+0x22e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a1e      	ldr	r2, [pc, #120]	; (8000eac <HAL_GPIO_Init+0x248>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d02b      	beq.n	8000e8e <HAL_GPIO_Init+0x22a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <HAL_GPIO_Init+0x24c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d025      	beq.n	8000e8a <HAL_GPIO_Init+0x226>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <HAL_GPIO_Init+0x250>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d01f      	beq.n	8000e86 <HAL_GPIO_Init+0x222>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a1b      	ldr	r2, [pc, #108]	; (8000eb8 <HAL_GPIO_Init+0x254>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d019      	beq.n	8000e82 <HAL_GPIO_Init+0x21e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <HAL_GPIO_Init+0x258>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d013      	beq.n	8000e7e <HAL_GPIO_Init+0x21a>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <HAL_GPIO_Init+0x25c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d00d      	beq.n	8000e7a <HAL_GPIO_Init+0x216>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <HAL_GPIO_Init+0x260>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d007      	beq.n	8000e76 <HAL_GPIO_Init+0x212>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_GPIO_Init+0x264>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d101      	bne.n	8000e72 <HAL_GPIO_Init+0x20e>
 8000e6e:	2309      	movs	r3, #9
 8000e70:	e02d      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e72:	230a      	movs	r3, #10
 8000e74:	e02b      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e76:	2308      	movs	r3, #8
 8000e78:	e029      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	e027      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e7e:	2306      	movs	r3, #6
 8000e80:	e025      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e82:	2305      	movs	r3, #5
 8000e84:	e023      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e021      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e01f      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e01d      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e01b      	b.n	8000ece <HAL_GPIO_Init+0x26a>
 8000e96:	bf00      	nop
 8000e98:	58000080 	.word	0x58000080
 8000e9c:	58024400 	.word	0x58024400
 8000ea0:	58000400 	.word	0x58000400
 8000ea4:	58020000 	.word	0x58020000
 8000ea8:	58020400 	.word	0x58020400
 8000eac:	58020800 	.word	0x58020800
 8000eb0:	58020c00 	.word	0x58020c00
 8000eb4:	58021000 	.word	0x58021000
 8000eb8:	58021400 	.word	0x58021400
 8000ebc:	58021800 	.word	0x58021800
 8000ec0:	58021c00 	.word	0x58021c00
 8000ec4:	58022000 	.word	0x58022000
 8000ec8:	58022400 	.word	0x58022400
 8000ecc:	2300      	movs	r3, #0
 8000ece:	69fa      	ldr	r2, [r7, #28]
 8000ed0:	f002 0203 	and.w	r2, r2, #3
 8000ed4:	0092      	lsls	r2, r2, #2
 8000ed6:	4093      	lsls	r3, r2
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ede:	4938      	ldr	r1, [pc, #224]	; (8000fc0 <HAL_GPIO_Init+0x35c>)
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f47f ae63 	bne.w	8000c78 <HAL_GPIO_Init+0x14>
  }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	3724      	adds	r7, #36	; 0x24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	58000400 	.word	0x58000400

08000fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	807b      	strh	r3, [r7, #2]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fd4:	787b      	ldrb	r3, [r7, #1]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000fe0:	e003      	b.n	8000fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	041a      	lsls	r2, r3, #16
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	619a      	str	r2, [r3, #24]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	b085      	sub	sp, #20
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	460b      	mov	r3, r1
 8001000:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001008:	887a      	ldrh	r2, [r7, #2]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4013      	ands	r3, r2
 800100e:	041a      	lsls	r2, r3, #16
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	43d9      	mvns	r1, r3
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	400b      	ands	r3, r1
 8001018:	431a      	orrs	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	619a      	str	r2, [r3, #24]
}
 800101e:	bf00      	nop
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001034:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_HSEM_FastTake+0x2c>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3320      	adds	r3, #32
 800103a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_HSEM_FastTake+0x30>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d101      	bne.n	8001048 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001044:	2300      	movs	r3, #0
 8001046:	e000      	b.n	800104a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
}
 800104a:	4618      	mov	r0, r3
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	58026400 	.word	0x58026400
 800105c:	80000300 	.word	0x80000300

08001060 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800106a:	4906      	ldr	r1, [pc, #24]	; (8001084 <HAL_HSEM_Release+0x24>)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	58026400 	.word	0x58026400

08001088 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_PWREx_ConfigSupply+0xb0>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	2b06      	cmp	r3, #6
 800109a:	d00a      	beq.n	80010b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <HAL_PWREx_ConfigSupply+0xb0>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d001      	beq.n	80010ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e040      	b.n	8001130 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e03e      	b.n	8001130 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010b2:	4b21      	ldr	r3, [pc, #132]	; (8001138 <HAL_PWREx_ConfigSupply+0xb0>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80010ba:	491f      	ldr	r1, [pc, #124]	; (8001138 <HAL_PWREx_ConfigSupply+0xb0>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4313      	orrs	r3, r2
 80010c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010c2:	f7ff fcd3 	bl	8000a6c <HAL_GetTick>
 80010c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010c8:	e009      	b.n	80010de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010ca:	f7ff fccf 	bl	8000a6c <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010d8:	d901      	bls.n	80010de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e028      	b.n	8001130 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_PWREx_ConfigSupply+0xb0>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ea:	d1ee      	bne.n	80010ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b1e      	cmp	r3, #30
 80010f0:	d008      	beq.n	8001104 <HAL_PWREx_ConfigSupply+0x7c>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b2e      	cmp	r3, #46	; 0x2e
 80010f6:	d005      	beq.n	8001104 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b1d      	cmp	r3, #29
 80010fc:	d002      	beq.n	8001104 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b2d      	cmp	r3, #45	; 0x2d
 8001102:	d114      	bne.n	800112e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001104:	f7ff fcb2 	bl	8000a6c <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800110a:	e009      	b.n	8001120 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800110c:	f7ff fcae 	bl	8000a6c <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800111a:	d901      	bls.n	8001120 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e007      	b.n	8001130 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_PWREx_ConfigSupply+0xb0>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d1ee      	bne.n	800110c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800112e:	2300      	movs	r3, #0
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	58024800 	.word	0x58024800

0800113c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	f000 bc1d 	b.w	800198a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0301 	and.w	r3, r3, #1
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 8087 	beq.w	800126c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800115e:	4b99      	ldr	r3, [pc, #612]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001168:	4b96      	ldr	r3, [pc, #600]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001170:	2b10      	cmp	r3, #16
 8001172:	d007      	beq.n	8001184 <HAL_RCC_OscConfig+0x48>
 8001174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001176:	2b18      	cmp	r3, #24
 8001178:	d110      	bne.n	800119c <HAL_RCC_OscConfig+0x60>
 800117a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d10b      	bne.n	800119c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001184:	4b8f      	ldr	r3, [pc, #572]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d06c      	beq.n	800126a <HAL_RCC_OscConfig+0x12e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d168      	bne.n	800126a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e3f6      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a4:	d106      	bne.n	80011b4 <HAL_RCC_OscConfig+0x78>
 80011a6:	4b87      	ldr	r3, [pc, #540]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a86      	ldr	r2, [pc, #536]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	e02e      	b.n	8001212 <HAL_RCC_OscConfig+0xd6>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10c      	bne.n	80011d6 <HAL_RCC_OscConfig+0x9a>
 80011bc:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a80      	ldr	r2, [pc, #512]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b7e      	ldr	r3, [pc, #504]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a7d      	ldr	r2, [pc, #500]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	e01d      	b.n	8001212 <HAL_RCC_OscConfig+0xd6>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011de:	d10c      	bne.n	80011fa <HAL_RCC_OscConfig+0xbe>
 80011e0:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a77      	ldr	r2, [pc, #476]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b75      	ldr	r3, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a74      	ldr	r2, [pc, #464]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	e00b      	b.n	8001212 <HAL_RCC_OscConfig+0xd6>
 80011fa:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a71      	ldr	r2, [pc, #452]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b6f      	ldr	r3, [pc, #444]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a6e      	ldr	r2, [pc, #440]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 800120c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d013      	beq.n	8001242 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fc27 	bl	8000a6c <HAL_GetTick>
 800121e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001222:	f7ff fc23 	bl	8000a6c <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b64      	cmp	r3, #100	; 0x64
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e3aa      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001234:	4b63      	ldr	r3, [pc, #396]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d0f0      	beq.n	8001222 <HAL_RCC_OscConfig+0xe6>
 8001240:	e014      	b.n	800126c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001242:	f7ff fc13 	bl	8000a6c <HAL_GetTick>
 8001246:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001248:	e008      	b.n	800125c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800124a:	f7ff fc0f 	bl	8000a6c <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b64      	cmp	r3, #100	; 0x64
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e396      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800125c:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d1f0      	bne.n	800124a <HAL_RCC_OscConfig+0x10e>
 8001268:	e000      	b.n	800126c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80cb 	beq.w	8001410 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800127a:	4b52      	ldr	r3, [pc, #328]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001282:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001284:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800128a:	6a3b      	ldr	r3, [r7, #32]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d007      	beq.n	80012a0 <HAL_RCC_OscConfig+0x164>
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	2b18      	cmp	r3, #24
 8001294:	d156      	bne.n	8001344 <HAL_RCC_OscConfig+0x208>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d151      	bne.n	8001344 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012a0:	4b48      	ldr	r3, [pc, #288]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d005      	beq.n	80012b8 <HAL_RCC_OscConfig+0x17c>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d101      	bne.n	80012b8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e368      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012b8:	4b42      	ldr	r3, [pc, #264]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f023 0219 	bic.w	r2, r3, #25
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	493f      	ldr	r1, [pc, #252]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80012ca:	f7ff fbcf 	bl	8000a6c <HAL_GetTick>
 80012ce:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d2:	f7ff fbcb 	bl	8000a6c <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e352      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f0:	f7ff fbc8 	bl	8000a84 <HAL_GetREVID>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d817      	bhi.n	800132e <HAL_RCC_OscConfig+0x1f2>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	2b40      	cmp	r3, #64	; 0x40
 8001304:	d108      	bne.n	8001318 <HAL_RCC_OscConfig+0x1dc>
 8001306:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800130e:	4a2d      	ldr	r2, [pc, #180]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001316:	e07b      	b.n	8001410 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691b      	ldr	r3, [r3, #16]
 8001324:	031b      	lsls	r3, r3, #12
 8001326:	4927      	ldr	r1, [pc, #156]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800132c:	e070      	b.n	8001410 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	061b      	lsls	r3, r3, #24
 800133c:	4921      	ldr	r1, [pc, #132]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001342:	e065      	b.n	8001410 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d048      	beq.n	80013de <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f023 0219 	bic.w	r2, r3, #25
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	491a      	ldr	r1, [pc, #104]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135e:	f7ff fb85 	bl	8000a6c <HAL_GetTick>
 8001362:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fb81 	bl	8000a6c <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e308      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0304 	and.w	r3, r3, #4
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	f7ff fb7e 	bl	8000a84 <HAL_GetREVID>
 8001388:	4603      	mov	r3, r0
 800138a:	f241 0203 	movw	r2, #4099	; 0x1003
 800138e:	4293      	cmp	r3, r2
 8001390:	d81a      	bhi.n	80013c8 <HAL_RCC_OscConfig+0x28c>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b40      	cmp	r3, #64	; 0x40
 8001398:	d108      	bne.n	80013ac <HAL_RCC_OscConfig+0x270>
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80013a2:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	6053      	str	r3, [r2, #4]
 80013aa:	e031      	b.n	8001410 <HAL_RCC_OscConfig+0x2d4>
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	031b      	lsls	r3, r3, #12
 80013ba:	4902      	ldr	r1, [pc, #8]	; (80013c4 <HAL_RCC_OscConfig+0x288>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
 80013c0:	e026      	b.n	8001410 <HAL_RCC_OscConfig+0x2d4>
 80013c2:	bf00      	nop
 80013c4:	58024400 	.word	0x58024400
 80013c8:	4b9a      	ldr	r3, [pc, #616]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	061b      	lsls	r3, r3, #24
 80013d6:	4997      	ldr	r1, [pc, #604]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
 80013dc:	e018      	b.n	8001410 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013de:	4b95      	ldr	r3, [pc, #596]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a94      	ldr	r2, [pc, #592]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80013e4:	f023 0301 	bic.w	r3, r3, #1
 80013e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ea:	f7ff fb3f 	bl	8000a6c <HAL_GetTick>
 80013ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013f0:	e008      	b.n	8001404 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f2:	f7ff fb3b 	bl	8000a6c <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e2c2      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001404:	4b8b      	ldr	r3, [pc, #556]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1f0      	bne.n	80013f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	2b00      	cmp	r3, #0
 800141a:	f000 80a9 	beq.w	8001570 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141e:	4b85      	ldr	r3, [pc, #532]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001426:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001428:	4b82      	ldr	r3, [pc, #520]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d007      	beq.n	8001444 <HAL_RCC_OscConfig+0x308>
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b18      	cmp	r3, #24
 8001438:	d13a      	bne.n	80014b0 <HAL_RCC_OscConfig+0x374>
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d135      	bne.n	80014b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001444:	4b7b      	ldr	r3, [pc, #492]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x320>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b80      	cmp	r3, #128	; 0x80
 8001456:	d001      	beq.n	800145c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e296      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800145c:	f7ff fb12 	bl	8000a84 <HAL_GetREVID>
 8001460:	4603      	mov	r3, r0
 8001462:	f241 0203 	movw	r2, #4099	; 0x1003
 8001466:	4293      	cmp	r3, r2
 8001468:	d817      	bhi.n	800149a <HAL_RCC_OscConfig+0x35e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2b20      	cmp	r3, #32
 8001470:	d108      	bne.n	8001484 <HAL_RCC_OscConfig+0x348>
 8001472:	4b70      	ldr	r3, [pc, #448]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800147a:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 800147c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001480:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001482:	e075      	b.n	8001570 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001484:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	069b      	lsls	r3, r3, #26
 8001492:	4968      	ldr	r1, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001498:	e06a      	b.n	8001570 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800149a:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	061b      	lsls	r3, r3, #24
 80014a8:	4962      	ldr	r1, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014ae:	e05f      	b.n	8001570 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d042      	beq.n	800153e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014b8:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a5d      	ldr	r2, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80014be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fad2 	bl	8000a6c <HAL_GetTick>
 80014c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80014cc:	f7ff face 	bl	8000a6c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e255      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014de:	4b55      	ldr	r3, [pc, #340]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014ea:	f7ff facb 	bl	8000a84 <HAL_GetREVID>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d817      	bhi.n	8001528 <HAL_RCC_OscConfig+0x3ec>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	2b20      	cmp	r3, #32
 80014fe:	d108      	bne.n	8001512 <HAL_RCC_OscConfig+0x3d6>
 8001500:	4b4c      	ldr	r3, [pc, #304]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001508:	4a4a      	ldr	r2, [pc, #296]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 800150a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800150e:	6053      	str	r3, [r2, #4]
 8001510:	e02e      	b.n	8001570 <HAL_RCC_OscConfig+0x434>
 8001512:	4b48      	ldr	r3, [pc, #288]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	069b      	lsls	r3, r3, #26
 8001520:	4944      	ldr	r1, [pc, #272]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001522:	4313      	orrs	r3, r2
 8001524:	604b      	str	r3, [r1, #4]
 8001526:	e023      	b.n	8001570 <HAL_RCC_OscConfig+0x434>
 8001528:	4b42      	ldr	r3, [pc, #264]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	061b      	lsls	r3, r3, #24
 8001536:	493f      	ldr	r1, [pc, #252]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001538:	4313      	orrs	r3, r2
 800153a:	60cb      	str	r3, [r1, #12]
 800153c:	e018      	b.n	8001570 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a3c      	ldr	r2, [pc, #240]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800154a:	f7ff fa8f 	bl	8000a6c <HAL_GetTick>
 800154e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001552:	f7ff fa8b 	bl	8000a6c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e212      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001564:	4b33      	ldr	r3, [pc, #204]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d036      	beq.n	80015ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d019      	beq.n	80015b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001588:	4a2a      	ldr	r2, [pc, #168]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001590:	f7ff fa6c 	bl	8000a6c <HAL_GetTick>
 8001594:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001598:	f7ff fa68 	bl	8000a6c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1ef      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80015ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x45c>
 80015b6:	e018      	b.n	80015ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80015ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015bc:	4a1d      	ldr	r2, [pc, #116]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80015be:	f023 0301 	bic.w	r3, r3, #1
 80015c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c4:	f7ff fa52 	bl	8000a6c <HAL_GetTick>
 80015c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015cc:	f7ff fa4e 	bl	8000a6c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e1d5      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015de:	4b15      	ldr	r3, [pc, #84]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 80015e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d1f0      	bne.n	80015cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0320 	and.w	r3, r3, #32
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d039      	beq.n	800166a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d01c      	beq.n	8001638 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001604:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001608:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800160a:	f7ff fa2f 	bl	8000a6c <HAL_GetTick>
 800160e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001612:	f7ff fa2b 	bl	8000a6c <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1b2      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_RCC_OscConfig+0x4f8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x4d6>
 8001630:	e01b      	b.n	800166a <HAL_RCC_OscConfig+0x52e>
 8001632:	bf00      	nop
 8001634:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001638:	4b9b      	ldr	r3, [pc, #620]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a9a      	ldr	r2, [pc, #616]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800163e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001642:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001644:	f7ff fa12 	bl	8000a6c <HAL_GetTick>
 8001648:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800164c:	f7ff fa0e 	bl	8000a6c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e195      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800165e:	4b92      	ldr	r3, [pc, #584]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8081 	beq.w	800177a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001678:	4b8c      	ldr	r3, [pc, #560]	; (80018ac <HAL_RCC_OscConfig+0x770>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a8b      	ldr	r2, [pc, #556]	; (80018ac <HAL_RCC_OscConfig+0x770>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001682:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001684:	f7ff f9f2 	bl	8000a6c <HAL_GetTick>
 8001688:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800168c:	f7ff f9ee 	bl	8000a6c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b64      	cmp	r3, #100	; 0x64
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e175      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800169e:	4b83      	ldr	r3, [pc, #524]	; (80018ac <HAL_RCC_OscConfig+0x770>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x584>
 80016b2:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	4a7c      	ldr	r2, [pc, #496]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6713      	str	r3, [r2, #112]	; 0x70
 80016be:	e02d      	b.n	800171c <HAL_RCC_OscConfig+0x5e0>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10c      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5a6>
 80016c8:	4b77      	ldr	r3, [pc, #476]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a76      	ldr	r2, [pc, #472]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80016ce:	f023 0301 	bic.w	r3, r3, #1
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
 80016d4:	4b74      	ldr	r3, [pc, #464]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d8:	4a73      	ldr	r2, [pc, #460]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80016da:	f023 0304 	bic.w	r3, r3, #4
 80016de:	6713      	str	r3, [r2, #112]	; 0x70
 80016e0:	e01c      	b.n	800171c <HAL_RCC_OscConfig+0x5e0>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0x5c8>
 80016ea:	4b6f      	ldr	r3, [pc, #444]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ee:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70
 80016f6:	4b6c      	ldr	r3, [pc, #432]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80016f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016fa:	4a6b      	ldr	r2, [pc, #428]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6713      	str	r3, [r2, #112]	; 0x70
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0x5e0>
 8001704:	4b68      	ldr	r3, [pc, #416]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001708:	4a67      	ldr	r2, [pc, #412]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800170a:	f023 0301 	bic.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	; 0x70
 8001710:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001714:	4a64      	ldr	r2, [pc, #400]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001716:	f023 0304 	bic.w	r3, r3, #4
 800171a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d015      	beq.n	8001750 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001724:	f7ff f9a2 	bl	8000a6c <HAL_GetTick>
 8001728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff f99e 	bl	8000a6c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e123      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001742:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d0ee      	beq.n	800172c <HAL_RCC_OscConfig+0x5f0>
 800174e:	e014      	b.n	800177a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff f98c 	bl	8000a6c <HAL_GetTick>
 8001754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001756:	e00a      	b.n	800176e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001758:	f7ff f988 	bl	8000a6c <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	f241 3288 	movw	r2, #5000	; 0x1388
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e10d      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800176e:	4b4e      	ldr	r3, [pc, #312]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ee      	bne.n	8001758 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 8102 	beq.w	8001988 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001784:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800178c:	2b18      	cmp	r3, #24
 800178e:	f000 80bd 	beq.w	800190c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	2b02      	cmp	r3, #2
 8001798:	f040 809e 	bne.w	80018d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179c:	4b42      	ldr	r3, [pc, #264]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a41      	ldr	r2, [pc, #260]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80017a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7ff f960 	bl	8000a6c <HAL_GetTick>
 80017ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b0:	f7ff f95c 	bl	8000a6c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e0e3      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017c2:	4b39      	ldr	r3, [pc, #228]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017ce:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80017d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017d2:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_RCC_OscConfig+0x774>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017de:	0112      	lsls	r2, r2, #4
 80017e0:	430a      	orrs	r2, r1
 80017e2:	4931      	ldr	r1, [pc, #196]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	628b      	str	r3, [r1, #40]	; 0x28
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	3b01      	subs	r3, #1
 80017ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f6:	3b01      	subs	r3, #1
 80017f8:	025b      	lsls	r3, r3, #9
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001802:	3b01      	subs	r3, #1
 8001804:	041b      	lsls	r3, r3, #16
 8001806:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800180a:	431a      	orrs	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001810:	3b01      	subs	r3, #1
 8001812:	061b      	lsls	r3, r3, #24
 8001814:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001818:	4923      	ldr	r1, [pc, #140]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800181a:	4313      	orrs	r3, r2
 800181c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800181e:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001822:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800182a:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800182c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_RCC_OscConfig+0x778>)
 8001830:	4013      	ands	r3, r2
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001836:	00d2      	lsls	r2, r2, #3
 8001838:	491b      	ldr	r1, [pc, #108]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800183a:	4313      	orrs	r3, r2
 800183c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800183e:	4b1a      	ldr	r3, [pc, #104]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	f023 020c 	bic.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	4917      	ldr	r1, [pc, #92]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800184c:	4313      	orrs	r3, r2
 800184e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001850:	4b15      	ldr	r3, [pc, #84]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	f023 0202 	bic.w	r2, r3, #2
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185c:	4912      	ldr	r1, [pc, #72]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800185e:	4313      	orrs	r3, r2
 8001860:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	4a10      	ldr	r2, [pc, #64]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001872:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a04      	ldr	r2, [pc, #16]	; (80018a8 <HAL_RCC_OscConfig+0x76c>)
 8001898:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800189c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800189e:	f7ff f8e5 	bl	8000a6c <HAL_GetTick>
 80018a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018a4:	e011      	b.n	80018ca <HAL_RCC_OscConfig+0x78e>
 80018a6:	bf00      	nop
 80018a8:	58024400 	.word	0x58024400
 80018ac:	58024800 	.word	0x58024800
 80018b0:	fffffc0c 	.word	0xfffffc0c
 80018b4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b8:	f7ff f8d8 	bl	8000a6c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e05f      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ca:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_RCC_OscConfig+0x858>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x77c>
 80018d6:	e057      	b.n	8001988 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d8:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_RCC_OscConfig+0x858>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a2d      	ldr	r2, [pc, #180]	; (8001994 <HAL_RCC_OscConfig+0x858>)
 80018de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff f8c2 	bl	8000a6c <HAL_GetTick>
 80018e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7ff f8be 	bl	8000a6c <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e045      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018fe:	4b25      	ldr	r3, [pc, #148]	; (8001994 <HAL_RCC_OscConfig+0x858>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x7b0>
 800190a:	e03d      	b.n	8001988 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <HAL_RCC_OscConfig+0x858>)
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_OscConfig+0x858>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191c:	2b01      	cmp	r3, #1
 800191e:	d031      	beq.n	8001984 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f003 0203 	and.w	r2, r3, #3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d12a      	bne.n	8001984 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	091b      	lsrs	r3, r3, #4
 8001932:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	429a      	cmp	r2, r3
 800193c:	d122      	bne.n	8001984 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001948:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800194a:	429a      	cmp	r2, r3
 800194c:	d11a      	bne.n	8001984 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	0a5b      	lsrs	r3, r3, #9
 8001952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d111      	bne.n	8001984 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	0c1b      	lsrs	r3, r3, #16
 8001964:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800196e:	429a      	cmp	r2, r3
 8001970:	d108      	bne.n	8001984 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	0e1b      	lsrs	r3, r3, #24
 8001976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3730      	adds	r7, #48	; 0x30
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	58024400 	.word	0x58024400

08001998 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e19c      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b8a      	ldr	r3, [pc, #552]	; (8001bd8 <HAL_RCC_ClockConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 030f 	and.w	r3, r3, #15
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d910      	bls.n	80019dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b87      	ldr	r3, [pc, #540]	; (8001bd8 <HAL_RCC_ClockConfig+0x240>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 020f 	bic.w	r2, r3, #15
 80019c2:	4985      	ldr	r1, [pc, #532]	; (8001bd8 <HAL_RCC_ClockConfig+0x240>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b83      	ldr	r3, [pc, #524]	; (8001bd8 <HAL_RCC_ClockConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e184      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d010      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691a      	ldr	r2, [r3, #16]
 80019ec:	4b7b      	ldr	r3, [pc, #492]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d908      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80019f8:	4b78      	ldr	r3, [pc, #480]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	4975      	ldr	r1, [pc, #468]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d010      	beq.n	8001a38 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695a      	ldr	r2, [r3, #20]
 8001a1a:	4b70      	ldr	r3, [pc, #448]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d908      	bls.n	8001a38 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a26:	4b6d      	ldr	r3, [pc, #436]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	695b      	ldr	r3, [r3, #20]
 8001a32:	496a      	ldr	r1, [pc, #424]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0310 	and.w	r3, r3, #16
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d010      	beq.n	8001a66 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	699a      	ldr	r2, [r3, #24]
 8001a48:	4b64      	ldr	r3, [pc, #400]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d908      	bls.n	8001a66 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001a54:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	495e      	ldr	r1, [pc, #376]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0320 	and.w	r3, r3, #32
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d010      	beq.n	8001a94 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69da      	ldr	r2, [r3, #28]
 8001a76:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d908      	bls.n	8001a94 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001a82:	4b56      	ldr	r3, [pc, #344]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4953      	ldr	r1, [pc, #332]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d010      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	4b4d      	ldr	r3, [pc, #308]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d908      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab0:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f023 020f 	bic.w	r2, r3, #15
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4947      	ldr	r1, [pc, #284]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d055      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ace:	4b43      	ldr	r3, [pc, #268]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	4940      	ldr	r1, [pc, #256]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ae8:	4b3c      	ldr	r3, [pc, #240]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d121      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0f6      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b00:	4b36      	ldr	r3, [pc, #216]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d115      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0ea      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b18:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0de      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b28:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0d6      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	f023 0207 	bic.w	r2, r3, #7
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4925      	ldr	r1, [pc, #148]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4a:	f7fe ff8f 	bl	8000a6c <HAL_GetTick>
 8001b4e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b50:	e00a      	b.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b52:	f7fe ff8b 	bl	8000a6c <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e0be      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b68:	4b1c      	ldr	r3, [pc, #112]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d1eb      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d010      	beq.n	8001ba8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d208      	bcs.n	8001ba8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f023 020f 	bic.w	r2, r3, #15
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	490e      	ldr	r1, [pc, #56]	; (8001bdc <HAL_RCC_ClockConfig+0x244>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <HAL_RCC_ClockConfig+0x240>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d214      	bcs.n	8001be0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_RCC_ClockConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f023 020f 	bic.w	r2, r3, #15
 8001bbe:	4906      	ldr	r1, [pc, #24]	; (8001bd8 <HAL_RCC_ClockConfig+0x240>)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bc6:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <HAL_RCC_ClockConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e086      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x34e>
 8001bd8:	52002000 	.word	0x52002000
 8001bdc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	691a      	ldr	r2, [r3, #16]
 8001bf0:	4b3f      	ldr	r3, [pc, #252]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d208      	bcs.n	8001c0e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bfc:	4b3c      	ldr	r3, [pc, #240]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	4939      	ldr	r1, [pc, #228]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d010      	beq.n	8001c3c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	695a      	ldr	r2, [r3, #20]
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d208      	bcs.n	8001c3c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c2a:	4b31      	ldr	r3, [pc, #196]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	492e      	ldr	r1, [pc, #184]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d010      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d208      	bcs.n	8001c6a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c58:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	4922      	ldr	r1, [pc, #136]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d010      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	4b1d      	ldr	r3, [pc, #116]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d208      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001c86:	4b1a      	ldr	r3, [pc, #104]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	4917      	ldr	r1, [pc, #92]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001c94:	4313      	orrs	r3, r2
 8001c96:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c98:	f000 f834 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001ca0:	699b      	ldr	r3, [r3, #24]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	f003 030f 	and.w	r3, r3, #15
 8001ca8:	4912      	ldr	r1, [pc, #72]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <HAL_RCC_ClockConfig+0x358>)
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <HAL_RCC_ClockConfig+0x35c>)
 8001cc0:	5cd3      	ldrb	r3, [r2, r3]
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_RCC_ClockConfig+0x360>)
 8001cce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001cd0:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_RCC_ClockConfig+0x364>)
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x368>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fe90 	bl	8000a00 <HAL_InitTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3718      	adds	r7, #24
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	58024400 	.word	0x58024400
 8001cf4:	080057ec 	.word	0x080057ec
 8001cf8:	24000004 	.word	0x24000004
 8001cfc:	24000000 	.word	0x24000000
 8001d00:	24000008 	.word	0x24000008

08001d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d0a:	4bb3      	ldr	r3, [pc, #716]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d12:	2b18      	cmp	r3, #24
 8001d14:	f200 8155 	bhi.w	8001fc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d18:	a201      	add	r2, pc, #4	; (adr r2, 8001d20 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1e:	bf00      	nop
 8001d20:	08001d85 	.word	0x08001d85
 8001d24:	08001fc3 	.word	0x08001fc3
 8001d28:	08001fc3 	.word	0x08001fc3
 8001d2c:	08001fc3 	.word	0x08001fc3
 8001d30:	08001fc3 	.word	0x08001fc3
 8001d34:	08001fc3 	.word	0x08001fc3
 8001d38:	08001fc3 	.word	0x08001fc3
 8001d3c:	08001fc3 	.word	0x08001fc3
 8001d40:	08001dab 	.word	0x08001dab
 8001d44:	08001fc3 	.word	0x08001fc3
 8001d48:	08001fc3 	.word	0x08001fc3
 8001d4c:	08001fc3 	.word	0x08001fc3
 8001d50:	08001fc3 	.word	0x08001fc3
 8001d54:	08001fc3 	.word	0x08001fc3
 8001d58:	08001fc3 	.word	0x08001fc3
 8001d5c:	08001fc3 	.word	0x08001fc3
 8001d60:	08001db1 	.word	0x08001db1
 8001d64:	08001fc3 	.word	0x08001fc3
 8001d68:	08001fc3 	.word	0x08001fc3
 8001d6c:	08001fc3 	.word	0x08001fc3
 8001d70:	08001fc3 	.word	0x08001fc3
 8001d74:	08001fc3 	.word	0x08001fc3
 8001d78:	08001fc3 	.word	0x08001fc3
 8001d7c:	08001fc3 	.word	0x08001fc3
 8001d80:	08001db7 	.word	0x08001db7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001d84:	4b94      	ldr	r3, [pc, #592]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0320 	and.w	r3, r3, #32
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001d90:	4b91      	ldr	r3, [pc, #580]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	08db      	lsrs	r3, r3, #3
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	4a90      	ldr	r2, [pc, #576]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001da0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8001da2:	e111      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001da4:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001da6:	61bb      	str	r3, [r7, #24]
    break;
 8001da8:	e10e      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8001daa:	4b8d      	ldr	r3, [pc, #564]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001dac:	61bb      	str	r3, [r7, #24]
    break;
 8001dae:	e10b      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8001db0:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001db2:	61bb      	str	r3, [r7, #24]
    break;
 8001db4:	e108      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001db6:	4b88      	ldr	r3, [pc, #544]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8001dc0:	4b85      	ldr	r3, [pc, #532]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001dcc:	4b82      	ldr	r3, [pc, #520]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8001dd6:	4b80      	ldr	r3, [pc, #512]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dda:	08db      	lsrs	r3, r3, #3
 8001ddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	f000 80e1 	beq.w	8001fbc <HAL_RCC_GetSysClockFreq+0x2b8>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	f000 8083 	beq.w	8001f08 <HAL_RCC_GetSysClockFreq+0x204>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	f200 80a1 	bhi.w	8001f4c <HAL_RCC_GetSysClockFreq+0x248>
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0x114>
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d056      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e16:	e099      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e18:	4b6f      	ldr	r3, [pc, #444]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0320 	and.w	r3, r3, #32
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d02d      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001e24:	4b6c      	ldr	r3, [pc, #432]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	08db      	lsrs	r3, r3, #3
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	4a6b      	ldr	r2, [pc, #428]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e30:	fa22 f303 	lsr.w	r3, r2, r3
 8001e34:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	ee07 3a90 	vmov	s15, r3
 8001e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	ee07 3a90 	vmov	s15, r3
 8001e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e4e:	4b62      	ldr	r3, [pc, #392]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001e62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001e6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8001e7e:	e087      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001fec <HAL_RCC_GetSysClockFreq+0x2e8>
 8001e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e92:	4b51      	ldr	r3, [pc, #324]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ea2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ea6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001eb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001ec2:	e065      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	ee07 3a90 	vmov	s15, r3
 8001eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ece:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ed6:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ee6:	ed97 6a02 	vldr	s12, [r7, #8]
 8001eea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ef6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f06:	e043      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001ff4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f4a:	e021      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001ff0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8001fe8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8001f8e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	0a5b      	lsrs	r3, r3, #9
 8001f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8001fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb4:	ee17 3a90 	vmov	r3, s15
 8001fb8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8001fba:	e005      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
    break;
 8001fc0:	e002      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8001fc2:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001fc4:	61bb      	str	r3, [r7, #24]
    break;
 8001fc6:	bf00      	nop
  }

  return sysclockfreq;
 8001fc8:	69bb      	ldr	r3, [r7, #24]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	58024400 	.word	0x58024400
 8001fdc:	03d09000 	.word	0x03d09000
 8001fe0:	003d0900 	.word	0x003d0900
 8001fe4:	017d7840 	.word	0x017d7840
 8001fe8:	46000000 	.word	0x46000000
 8001fec:	4c742400 	.word	0x4c742400
 8001ff0:	4a742400 	.word	0x4a742400
 8001ff4:	4bbebc20 	.word	0x4bbebc20

08001ff8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f103 0208 	add.w	r2, r3, #8
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002010:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f103 0208 	add.w	r2, r3, #8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f103 0208 	add.w	r2, r3, #8
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002052:	b480      	push	{r7}
 8002054:	b085      	sub	sp, #20
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
 800205a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	689a      	ldr	r2, [r3, #8]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	601a      	str	r2, [r3, #0]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800209a:	b480      	push	{r7}
 800209c:	b085      	sub	sp, #20
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020b0:	d103      	bne.n	80020ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	e00c      	b.n	80020d4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3308      	adds	r3, #8
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	e002      	b.n	80020c8 <vListInsert+0x2e>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68ba      	ldr	r2, [r7, #8]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d2f6      	bcs.n	80020c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	683a      	ldr	r2, [r7, #0]
 80020ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	601a      	str	r2, [r3, #0]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6892      	ldr	r2, [r2, #8]
 8002122:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6852      	ldr	r2, [r2, #4]
 800212c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d103      	bne.n	8002140 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689a      	ldr	r2, [r3, #8]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	1e5a      	subs	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af04      	add	r7, sp, #16
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	603b      	str	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4618      	mov	r0, r3
 8002176:	f001 f857 	bl	8003228 <pvPortMalloc>
 800217a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00e      	beq.n	80021a0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002182:	205c      	movs	r0, #92	; 0x5c
 8002184:	f001 f850 	bl	8003228 <pvPortMalloc>
 8002188:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d003      	beq.n	8002198 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
 8002196:	e005      	b.n	80021a4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f001 f92b 	bl	80033f4 <vPortFree>
 800219e:	e001      	b.n	80021a4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d013      	beq.n	80021d2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80021aa:	88fa      	ldrh	r2, [r7, #6]
 80021ac:	2300      	movs	r3, #0
 80021ae:	9303      	str	r3, [sp, #12]
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68b9      	ldr	r1, [r7, #8]
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f000 f80e 	bl	80021e2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021c6:	69f8      	ldr	r0, [r7, #28]
 80021c8:	f000 f8a4 	bl	8002314 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021cc:	2301      	movs	r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	e002      	b.n	80021d8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021d6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021d8:	69bb      	ldr	r3, [r7, #24]
    }
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b088      	sub	sp, #32
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	60f8      	str	r0, [r7, #12]
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	461a      	mov	r2, r3
 80021fa:	21a5      	movs	r1, #165	; 0xa5
 80021fc:	f003 fa66 	bl	80056cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800220a:	440b      	add	r3, r1
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	f023 0307 	bic.w	r3, r3, #7
 8002218:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00c      	beq.n	800223e <prvInitialiseNewTask+0x5c>
        __asm volatile
 8002224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002228:	b672      	cpsid	i
 800222a:	f383 8811 	msr	BASEPRI, r3
 800222e:	f3bf 8f6f 	isb	sy
 8002232:	f3bf 8f4f 	dsb	sy
 8002236:	b662      	cpsie	i
 8002238:	617b      	str	r3, [r7, #20]
    }
 800223a:	bf00      	nop
 800223c:	e7fe      	b.n	800223c <prvInitialiseNewTask+0x5a>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01f      	beq.n	8002284 <prvInitialiseNewTask+0xa2>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
 8002248:	e012      	b.n	8002270 <prvInitialiseNewTask+0x8e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	7819      	ldrb	r1, [r3, #0]
 8002252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	4413      	add	r3, r2
 8002258:	3334      	adds	r3, #52	; 0x34
 800225a:	460a      	mov	r2, r1
 800225c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	4413      	add	r3, r2
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <prvInitialiseNewTask+0x96>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3301      	adds	r3, #1
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	2b0f      	cmp	r3, #15
 8002274:	d9e9      	bls.n	800224a <prvInitialiseNewTask+0x68>
 8002276:	e000      	b.n	800227a <prvInitialiseNewTask+0x98>
            {
                break;
 8002278:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800227a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227c:	2200      	movs	r2, #0
 800227e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002282:	e003      	b.n	800228c <prvInitialiseNewTask+0xaa>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800228c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228e:	2b06      	cmp	r3, #6
 8002290:	d901      	bls.n	8002296 <prvInitialiseNewTask+0xb4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002292:	2306      	movs	r3, #6
 8002294:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002298:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800229a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022a0:	64da      	str	r2, [r3, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a4:	2200      	movs	r2, #0
 80022a6:	651a      	str	r2, [r3, #80]	; 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	3304      	adds	r3, #4
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff fec3 	bl	8002038 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	3318      	adds	r3, #24
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff febe 	bl	8002038 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022c0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	f1c3 0207 	rsb	r2, r3, #7
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	3354      	adds	r3, #84	; 0x54
 80022d6:	2204      	movs	r2, #4
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 f9f6 	bl	80056cc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80022e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e2:	3358      	adds	r3, #88	; 0x58
 80022e4:	2201      	movs	r2, #1
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f003 f9ef 	bl	80056cc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	68f9      	ldr	r1, [r7, #12]
 80022f2:	69b8      	ldr	r0, [r7, #24]
 80022f4:	f000 fca2 	bl	8002c3c <pxPortInitialiseStack>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fc:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d002      	beq.n	800230a <prvInitialiseNewTask+0x128>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002308:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800230a:	bf00      	nop
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002314:	b5b0      	push	{r4, r5, r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af02      	add	r7, sp, #8
 800231a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800231c:	f000 fe4e 	bl	8002fbc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002320:	4b3b      	ldr	r3, [pc, #236]	; (8002410 <prvAddNewTaskToReadyList+0xfc>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	3301      	adds	r3, #1
 8002326:	4a3a      	ldr	r2, [pc, #232]	; (8002410 <prvAddNewTaskToReadyList+0xfc>)
 8002328:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800232a:	4b3a      	ldr	r3, [pc, #232]	; (8002414 <prvAddNewTaskToReadyList+0x100>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002332:	4a38      	ldr	r2, [pc, #224]	; (8002414 <prvAddNewTaskToReadyList+0x100>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002338:	4b35      	ldr	r3, [pc, #212]	; (8002410 <prvAddNewTaskToReadyList+0xfc>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d110      	bne.n	8002362 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002340:	f000 fb70 	bl	8002a24 <prvInitialiseTaskLists>
 8002344:	e00d      	b.n	8002362 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002346:	4b34      	ldr	r3, [pc, #208]	; (8002418 <prvAddNewTaskToReadyList+0x104>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d109      	bne.n	8002362 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800234e:	4b31      	ldr	r3, [pc, #196]	; (8002414 <prvAddNewTaskToReadyList+0x100>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	429a      	cmp	r2, r3
 800235a:	d802      	bhi.n	8002362 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800235c:	4a2d      	ldr	r2, [pc, #180]	; (8002414 <prvAddNewTaskToReadyList+0x100>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002362:	4b2e      	ldr	r3, [pc, #184]	; (800241c <prvAddNewTaskToReadyList+0x108>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	3301      	adds	r3, #1
 8002368:	4a2c      	ldr	r2, [pc, #176]	; (800241c <prvAddNewTaskToReadyList+0x108>)
 800236a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800236c:	4b2b      	ldr	r3, [pc, #172]	; (800241c <prvAddNewTaskToReadyList+0x108>)
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d016      	beq.n	80023a8 <prvAddNewTaskToReadyList+0x94>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4618      	mov	r0, r3
 800237e:	f002 fef1 	bl	8005164 <SEGGER_SYSVIEW_OnTaskCreate>
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	461d      	mov	r5, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	461c      	mov	r4, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	1ae3      	subs	r3, r4, r3
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	462b      	mov	r3, r5
 80023a4:	f001 f9f8 	bl	8003798 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f002 ff5e 	bl	800526c <SEGGER_SYSVIEW_OnTaskStartReady>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	2201      	movs	r2, #1
 80023b6:	409a      	lsls	r2, r3
 80023b8:	4b19      	ldr	r3, [pc, #100]	; (8002420 <prvAddNewTaskToReadyList+0x10c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4313      	orrs	r3, r2
 80023be:	4a18      	ldr	r2, [pc, #96]	; (8002420 <prvAddNewTaskToReadyList+0x10c>)
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c6:	4613      	mov	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4a15      	ldr	r2, [pc, #84]	; (8002424 <prvAddNewTaskToReadyList+0x110>)
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	3304      	adds	r3, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f7ff fe3a 	bl	8002052 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023de:	f000 fe21 	bl	8003024 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <prvAddNewTaskToReadyList+0x104>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00e      	beq.n	8002408 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <prvAddNewTaskToReadyList+0x100>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d207      	bcs.n	8002408 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <prvAddNewTaskToReadyList+0x114>)
 80023fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bdb0      	pop	{r4, r5, r7, pc}
 8002410:	24000138 	.word	0x24000138
 8002414:	24000038 	.word	0x24000038
 8002418:	24000144 	.word	0x24000144
 800241c:	24000154 	.word	0x24000154
 8002420:	24000140 	.word	0x24000140
 8002424:	2400003c 	.word	0x2400003c
 8002428:	e000ed04 	.word	0xe000ed04

0800242c <xTaskDelayUntil>:

#if ( INCLUDE_xTaskDelayUntil == 1 )

    BaseType_t xTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                                const TickType_t xTimeIncrement )
    {
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	; 0x24

        configASSERT( pxPreviousWakeTime );
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d10c      	bne.n	800245a <xTaskDelayUntil+0x2e>
        __asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	b672      	cpsid	i
 8002446:	f383 8811 	msr	BASEPRI, r3
 800244a:	f3bf 8f6f 	isb	sy
 800244e:	f3bf 8f4f 	dsb	sy
 8002452:	b662      	cpsie	i
 8002454:	617b      	str	r3, [r7, #20]
    }
 8002456:	bf00      	nop
 8002458:	e7fe      	b.n	8002458 <xTaskDelayUntil+0x2c>
        configASSERT( ( xTimeIncrement > 0U ) );
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10c      	bne.n	800247a <xTaskDelayUntil+0x4e>
        __asm volatile
 8002460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002464:	b672      	cpsid	i
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	f3bf 8f6f 	isb	sy
 800246e:	f3bf 8f4f 	dsb	sy
 8002472:	b662      	cpsie	i
 8002474:	613b      	str	r3, [r7, #16]
    }
 8002476:	bf00      	nop
 8002478:	e7fe      	b.n	8002478 <xTaskDelayUntil+0x4c>
        configASSERT( uxSchedulerSuspended == 0 );
 800247a:	4b2d      	ldr	r3, [pc, #180]	; (8002530 <xTaskDelayUntil+0x104>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00c      	beq.n	800249c <xTaskDelayUntil+0x70>
        __asm volatile
 8002482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002486:	b672      	cpsid	i
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	b662      	cpsie	i
 8002496:	60fb      	str	r3, [r7, #12]
    }
 8002498:	bf00      	nop
 800249a:	e7fe      	b.n	800249a <xTaskDelayUntil+0x6e>

        vTaskSuspendAll();
 800249c:	f000 f8ae 	bl	80025fc <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 80024a0:	4b24      	ldr	r3, [pc, #144]	; (8002534 <xTaskDelayUntil+0x108>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	623b      	str	r3, [r7, #32]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	4413      	add	r3, r2
 80024ae:	61fb      	str	r3, [r7, #28]

            if( xConstTickCount < *pxPreviousWakeTime )
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6a3a      	ldr	r2, [r7, #32]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d20b      	bcs.n	80024d2 <xTaskDelayUntil+0xa6>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d211      	bcs.n	80024e8 <xTaskDelayUntil+0xbc>
 80024c4:	69fa      	ldr	r2, [r7, #28]
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d90d      	bls.n	80024e8 <xTaskDelayUntil+0xbc>
                {
                    xShouldDelay = pdTRUE;
 80024cc:	2301      	movs	r3, #1
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
 80024d0:	e00a      	b.n	80024e8 <xTaskDelayUntil+0xbc>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d303      	bcc.n	80024e4 <xTaskDelayUntil+0xb8>
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d901      	bls.n	80024e8 <xTaskDelayUntil+0xbc>
                {
                    xShouldDelay = pdTRUE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	69fa      	ldr	r2, [r7, #28]
 80024ec:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <xTaskDelayUntil+0xdc>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );
 80024f4:	2024      	movs	r0, #36	; 0x24
 80024f6:	f002 fa23 	bl	8004940 <SEGGER_SYSVIEW_RecordVoid>

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2100      	movs	r1, #0
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fb28 	bl	8002b58 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002508:	f000 f886 	bl	8002618 <xTaskResumeAll>
 800250c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d107      	bne.n	8002524 <xTaskDelayUntil+0xf8>
        {
            portYIELD_WITHIN_API();
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <xTaskDelayUntil+0x10c>)
 8002516:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xShouldDelay;
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002526:	4618      	mov	r0, r3
 8002528:	3728      	adds	r7, #40	; 0x28
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	24000160 	.word	0x24000160
 8002534:	2400013c 	.word	0x2400013c
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002542:	4b26      	ldr	r3, [pc, #152]	; (80025dc <vTaskStartScheduler+0xa0>)
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	2300      	movs	r3, #0
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	2300      	movs	r3, #0
 800254c:	2280      	movs	r2, #128	; 0x80
 800254e:	4924      	ldr	r1, [pc, #144]	; (80025e0 <vTaskStartScheduler+0xa4>)
 8002550:	4824      	ldr	r0, [pc, #144]	; (80025e4 <vTaskStartScheduler+0xa8>)
 8002552:	f7ff fe05 	bl	8002160 <xTaskCreate>
 8002556:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d126      	bne.n	80025ac <vTaskStartScheduler+0x70>
        __asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002562:	b672      	cpsid	i
 8002564:	f383 8811 	msr	BASEPRI, r3
 8002568:	f3bf 8f6f 	isb	sy
 800256c:	f3bf 8f4f 	dsb	sy
 8002570:	b662      	cpsie	i
 8002572:	60bb      	str	r3, [r7, #8]
    }
 8002574:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <vTaskStartScheduler+0xac>)
 8002578:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800257c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800257e:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <vTaskStartScheduler+0xb0>)
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <vTaskStartScheduler+0xb4>)
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <vTaskStartScheduler+0xb8>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <vTaskStartScheduler+0xa0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	429a      	cmp	r2, r3
 8002594:	d102      	bne.n	800259c <vTaskStartScheduler+0x60>
 8002596:	f002 fdc9 	bl	800512c <SEGGER_SYSVIEW_OnIdle>
 800259a:	e004      	b.n	80025a6 <vTaskStartScheduler+0x6a>
 800259c:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <vTaskStartScheduler+0xb8>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f002 fe21 	bl	80051e8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025a6:	f000 fbdd 	bl	8002d64 <xPortStartScheduler>
 80025aa:	e010      	b.n	80025ce <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025b2:	d10c      	bne.n	80025ce <vTaskStartScheduler+0x92>
        __asm volatile
 80025b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b8:	b672      	cpsid	i
 80025ba:	f383 8811 	msr	BASEPRI, r3
 80025be:	f3bf 8f6f 	isb	sy
 80025c2:	f3bf 8f4f 	dsb	sy
 80025c6:	b662      	cpsie	i
 80025c8:	607b      	str	r3, [r7, #4]
    }
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <vTaskStartScheduler+0x90>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80025ce:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <vTaskStartScheduler+0xbc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
}
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2400015c 	.word	0x2400015c
 80025e0:	0800572c 	.word	0x0800572c
 80025e4:	080029f5 	.word	0x080029f5
 80025e8:	24000158 	.word	0x24000158
 80025ec:	24000144 	.word	0x24000144
 80025f0:	2400013c 	.word	0x2400013c
 80025f4:	24000038 	.word	0x24000038
 80025f8:	24000010 	.word	0x24000010

080025fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <vTaskSuspendAll+0x18>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	4a03      	ldr	r2, [pc, #12]	; (8002614 <vTaskSuspendAll+0x18>)
 8002608:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	24000160 	.word	0x24000160

08002618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002622:	2300      	movs	r3, #0
 8002624:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002626:	4b44      	ldr	r3, [pc, #272]	; (8002738 <xTaskResumeAll+0x120>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10c      	bne.n	8002648 <xTaskResumeAll+0x30>
        __asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	b672      	cpsid	i
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	b662      	cpsie	i
 8002642:	603b      	str	r3, [r7, #0]
    }
 8002644:	bf00      	nop
 8002646:	e7fe      	b.n	8002646 <xTaskResumeAll+0x2e>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002648:	f000 fcb8 	bl	8002fbc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800264c:	4b3a      	ldr	r3, [pc, #232]	; (8002738 <xTaskResumeAll+0x120>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	3b01      	subs	r3, #1
 8002652:	4a39      	ldr	r2, [pc, #228]	; (8002738 <xTaskResumeAll+0x120>)
 8002654:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002656:	4b38      	ldr	r3, [pc, #224]	; (8002738 <xTaskResumeAll+0x120>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d165      	bne.n	800272a <xTaskResumeAll+0x112>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <xTaskResumeAll+0x124>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d061      	beq.n	800272a <xTaskResumeAll+0x112>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002666:	e032      	b.n	80026ce <xTaskResumeAll+0xb6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002668:	4b35      	ldr	r3, [pc, #212]	; (8002740 <xTaskResumeAll+0x128>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	3318      	adds	r3, #24
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff fd49 	bl	800210c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	3304      	adds	r3, #4
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fd44 	bl	800210c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4618      	mov	r0, r3
 8002688:	f002 fdf0 	bl	800526c <SEGGER_SYSVIEW_OnTaskStartReady>
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	2201      	movs	r2, #1
 8002692:	409a      	lsls	r2, r3
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <xTaskResumeAll+0x12c>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4313      	orrs	r3, r2
 800269a:	4a2a      	ldr	r2, [pc, #168]	; (8002744 <xTaskResumeAll+0x12c>)
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a2:	4613      	mov	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4a27      	ldr	r2, [pc, #156]	; (8002748 <xTaskResumeAll+0x130>)
 80026ac:	441a      	add	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	3304      	adds	r3, #4
 80026b2:	4619      	mov	r1, r3
 80026b4:	4610      	mov	r0, r2
 80026b6:	f7ff fccc 	bl	8002052 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026be:	4b23      	ldr	r3, [pc, #140]	; (800274c <xTaskResumeAll+0x134>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d302      	bcc.n	80026ce <xTaskResumeAll+0xb6>
                    {
                        xYieldPending = pdTRUE;
 80026c8:	4b21      	ldr	r3, [pc, #132]	; (8002750 <xTaskResumeAll+0x138>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <xTaskResumeAll+0x128>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1c8      	bne.n	8002668 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <xTaskResumeAll+0xc8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80026dc:	f000 fa20 	bl	8002b20 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <xTaskResumeAll+0x13c>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d010      	beq.n	800270e <xTaskResumeAll+0xf6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80026ec:	f000 f858 	bl	80027a0 <xTaskIncrementTick>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <xTaskResumeAll+0xe4>
                            {
                                xYieldPending = pdTRUE;
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <xTaskResumeAll+0x138>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f1      	bne.n	80026ec <xTaskResumeAll+0xd4>

                        xPendedTicks = 0;
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <xTaskResumeAll+0x13c>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800270e:	4b10      	ldr	r3, [pc, #64]	; (8002750 <xTaskResumeAll+0x138>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d009      	beq.n	800272a <xTaskResumeAll+0x112>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002716:	2301      	movs	r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <xTaskResumeAll+0x140>)
 800271c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002720:	601a      	str	r2, [r3, #0]
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800272a:	f000 fc7b 	bl	8003024 <vPortExitCritical>

    return xAlreadyYielded;
 800272e:	68bb      	ldr	r3, [r7, #8]
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	24000160 	.word	0x24000160
 800273c:	24000138 	.word	0x24000138
 8002740:	240000f8 	.word	0x240000f8
 8002744:	24000140 	.word	0x24000140
 8002748:	2400003c 	.word	0x2400003c
 800274c:	24000038 	.word	0x24000038
 8002750:	2400014c 	.word	0x2400014c
 8002754:	24000148 	.word	0x24000148
 8002758:	e000ed04 	.word	0xe000ed04

0800275c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <xTaskGetTickCount+0x1c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002768:	687b      	ldr	r3, [r7, #4]
}
 800276a:	4618      	mov	r0, r3
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	2400013c 	.word	0x2400013c

0800277c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002782:	f000 fd0d 	bl	80031a0 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <xTaskGetTickCountFromISR+0x20>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002790:	683b      	ldr	r3, [r7, #0]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2400013c 	.word	0x2400013c

080027a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027aa:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <xTaskIncrementTick+0x150>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 8094 	bne.w	80028dc <xTaskIncrementTick+0x13c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027b4:	4b4f      	ldr	r3, [pc, #316]	; (80028f4 <xTaskIncrementTick+0x154>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3301      	adds	r3, #1
 80027ba:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027bc:	4a4d      	ldr	r2, [pc, #308]	; (80028f4 <xTaskIncrementTick+0x154>)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d122      	bne.n	800280e <xTaskIncrementTick+0x6e>
        {
            taskSWITCH_DELAYED_LISTS();
 80027c8:	4b4b      	ldr	r3, [pc, #300]	; (80028f8 <xTaskIncrementTick+0x158>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00c      	beq.n	80027ec <xTaskIncrementTick+0x4c>
        __asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	b672      	cpsid	i
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	b662      	cpsie	i
 80027e6:	603b      	str	r3, [r7, #0]
    }
 80027e8:	bf00      	nop
 80027ea:	e7fe      	b.n	80027ea <xTaskIncrementTick+0x4a>
 80027ec:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <xTaskIncrementTick+0x158>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b42      	ldr	r3, [pc, #264]	; (80028fc <xTaskIncrementTick+0x15c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a40      	ldr	r2, [pc, #256]	; (80028f8 <xTaskIncrementTick+0x158>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4a40      	ldr	r2, [pc, #256]	; (80028fc <xTaskIncrementTick+0x15c>)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <xTaskIncrementTick+0x160>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3301      	adds	r3, #1
 8002806:	4a3e      	ldr	r2, [pc, #248]	; (8002900 <xTaskIncrementTick+0x160>)
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	f000 f989 	bl	8002b20 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800280e:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <xTaskIncrementTick+0x164>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	429a      	cmp	r2, r3
 8002816:	d34c      	bcc.n	80028b2 <xTaskIncrementTick+0x112>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002818:	4b37      	ldr	r3, [pc, #220]	; (80028f8 <xTaskIncrementTick+0x158>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <xTaskIncrementTick+0x164>)
 8002824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002828:	601a      	str	r2, [r3, #0]
                    break;
 800282a:	e042      	b.n	80028b2 <xTaskIncrementTick+0x112>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800282c:	4b32      	ldr	r3, [pc, #200]	; (80028f8 <xTaskIncrementTick+0x158>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d203      	bcs.n	800284c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002844:	4a2f      	ldr	r2, [pc, #188]	; (8002904 <xTaskIncrementTick+0x164>)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800284a:	e032      	b.n	80028b2 <xTaskIncrementTick+0x112>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	3304      	adds	r3, #4
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fc5b 	bl	800210c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <xTaskIncrementTick+0xc8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	3318      	adds	r3, #24
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fc52 	bl	800210c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	4618      	mov	r0, r3
 800286c:	f002 fcfe 	bl	800526c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	2201      	movs	r2, #1
 8002876:	409a      	lsls	r2, r3
 8002878:	4b23      	ldr	r3, [pc, #140]	; (8002908 <xTaskIncrementTick+0x168>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4313      	orrs	r3, r2
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <xTaskIncrementTick+0x168>)
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002886:	4613      	mov	r3, r2
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4a1f      	ldr	r2, [pc, #124]	; (800290c <xTaskIncrementTick+0x16c>)
 8002890:	441a      	add	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	3304      	adds	r3, #4
 8002896:	4619      	mov	r1, r3
 8002898:	4610      	mov	r0, r2
 800289a:	f7ff fbda 	bl	8002052 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <xTaskIncrementTick+0x170>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d3b5      	bcc.n	8002818 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028b0:	e7b2      	b.n	8002818 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <xTaskIncrementTick+0x170>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b8:	4914      	ldr	r1, [pc, #80]	; (800290c <xTaskIncrementTick+0x16c>)
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d901      	bls.n	80028ce <xTaskIncrementTick+0x12e>
                {
                    xSwitchRequired = pdTRUE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028ce:	4b11      	ldr	r3, [pc, #68]	; (8002914 <xTaskIncrementTick+0x174>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <xTaskIncrementTick+0x146>
                {
                    xSwitchRequired = pdTRUE;
 80028d6:	2301      	movs	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	e004      	b.n	80028e6 <xTaskIncrementTick+0x146>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	; (8002918 <xTaskIncrementTick+0x178>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <xTaskIncrementTick+0x178>)
 80028e4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028e6:	697b      	ldr	r3, [r7, #20]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	24000160 	.word	0x24000160
 80028f4:	2400013c 	.word	0x2400013c
 80028f8:	240000f0 	.word	0x240000f0
 80028fc:	240000f4 	.word	0x240000f4
 8002900:	24000150 	.word	0x24000150
 8002904:	24000158 	.word	0x24000158
 8002908:	24000140 	.word	0x24000140
 800290c:	2400003c 	.word	0x2400003c
 8002910:	24000038 	.word	0x24000038
 8002914:	2400014c 	.word	0x2400014c
 8002918:	24000148 	.word	0x24000148

0800291c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002922:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <vTaskSwitchContext+0xc0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800292a:	4b2d      	ldr	r3, [pc, #180]	; (80029e0 <vTaskSwitchContext+0xc4>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002930:	e04f      	b.n	80029d2 <vTaskSwitchContext+0xb6>
        xYieldPending = pdFALSE;
 8002932:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <vTaskSwitchContext+0xc4>)
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002938:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <vTaskSwitchContext+0xc8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002946:	7afb      	ldrb	r3, [r7, #11]
 8002948:	f1c3 031f 	rsb	r3, r3, #31
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	4926      	ldr	r1, [pc, #152]	; (80029e8 <vTaskSwitchContext+0xcc>)
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <vTaskSwitchContext+0x60>
        __asm volatile
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	b672      	cpsid	i
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	b662      	cpsie	i
 8002976:	607b      	str	r3, [r7, #4]
    }
 8002978:	bf00      	nop
 800297a:	e7fe      	b.n	800297a <vTaskSwitchContext+0x5e>
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4a18      	ldr	r2, [pc, #96]	; (80029e8 <vTaskSwitchContext+0xcc>)
 8002988:	4413      	add	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	3308      	adds	r3, #8
 800299e:	429a      	cmp	r2, r3
 80029a0:	d104      	bne.n	80029ac <vTaskSwitchContext+0x90>
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	605a      	str	r2, [r3, #4]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <vTaskSwitchContext+0xd0>)
 80029b4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80029b6:	4b0d      	ldr	r3, [pc, #52]	; (80029ec <vTaskSwitchContext+0xd0>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	4b0d      	ldr	r3, [pc, #52]	; (80029f0 <vTaskSwitchContext+0xd4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d102      	bne.n	80029c8 <vTaskSwitchContext+0xac>
 80029c2:	f002 fbb3 	bl	800512c <SEGGER_SYSVIEW_OnIdle>
}
 80029c6:	e004      	b.n	80029d2 <vTaskSwitchContext+0xb6>
        traceTASK_SWITCHED_IN();
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <vTaskSwitchContext+0xd0>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fc0b 	bl	80051e8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	24000160 	.word	0x24000160
 80029e0:	2400014c 	.word	0x2400014c
 80029e4:	24000140 	.word	0x24000140
 80029e8:	2400003c 	.word	0x2400003c
 80029ec:	24000038 	.word	0x24000038
 80029f0:	2400015c 	.word	0x2400015c

080029f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80029fc:	f000 f852 	bl	8002aa4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <prvIdleTask+0x28>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d9f9      	bls.n	80029fc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <prvIdleTask+0x2c>)
 8002a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002a18:	e7f0      	b.n	80029fc <prvIdleTask+0x8>
 8002a1a:	bf00      	nop
 8002a1c:	2400003c 	.word	0x2400003c
 8002a20:	e000ed04 	.word	0xe000ed04

08002a24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	607b      	str	r3, [r7, #4]
 8002a2e:	e00c      	b.n	8002a4a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <prvInitialiseTaskLists+0x60>)
 8002a3c:	4413      	add	r3, r2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fada 	bl	8001ff8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3301      	adds	r3, #1
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b06      	cmp	r3, #6
 8002a4e:	d9ef      	bls.n	8002a30 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a50:	480d      	ldr	r0, [pc, #52]	; (8002a88 <prvInitialiseTaskLists+0x64>)
 8002a52:	f7ff fad1 	bl	8001ff8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a56:	480d      	ldr	r0, [pc, #52]	; (8002a8c <prvInitialiseTaskLists+0x68>)
 8002a58:	f7ff face 	bl	8001ff8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a5c:	480c      	ldr	r0, [pc, #48]	; (8002a90 <prvInitialiseTaskLists+0x6c>)
 8002a5e:	f7ff facb 	bl	8001ff8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a62:	480c      	ldr	r0, [pc, #48]	; (8002a94 <prvInitialiseTaskLists+0x70>)
 8002a64:	f7ff fac8 	bl	8001ff8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a68:	480b      	ldr	r0, [pc, #44]	; (8002a98 <prvInitialiseTaskLists+0x74>)
 8002a6a:	f7ff fac5 	bl	8001ff8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a6e:	4b0b      	ldr	r3, [pc, #44]	; (8002a9c <prvInitialiseTaskLists+0x78>)
 8002a70:	4a05      	ldr	r2, [pc, #20]	; (8002a88 <prvInitialiseTaskLists+0x64>)
 8002a72:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a74:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <prvInitialiseTaskLists+0x7c>)
 8002a76:	4a05      	ldr	r2, [pc, #20]	; (8002a8c <prvInitialiseTaskLists+0x68>)
 8002a78:	601a      	str	r2, [r3, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	2400003c 	.word	0x2400003c
 8002a88:	240000c8 	.word	0x240000c8
 8002a8c:	240000dc 	.word	0x240000dc
 8002a90:	240000f8 	.word	0x240000f8
 8002a94:	2400010c 	.word	0x2400010c
 8002a98:	24000124 	.word	0x24000124
 8002a9c:	240000f0 	.word	0x240000f0
 8002aa0:	240000f4 	.word	0x240000f4

08002aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002aaa:	e019      	b.n	8002ae0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002aac:	f000 fa86 	bl	8002fbc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <prvCheckTasksWaitingTermination+0x50>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3304      	adds	r3, #4
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fb25 	bl	800210c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <prvCheckTasksWaitingTermination+0x54>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	4a0b      	ldr	r2, [pc, #44]	; (8002af8 <prvCheckTasksWaitingTermination+0x54>)
 8002aca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <prvCheckTasksWaitingTermination+0x58>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <prvCheckTasksWaitingTermination+0x58>)
 8002ad4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ad6:	f000 faa5 	bl	8003024 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 f810 	bl	8002b00 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <prvCheckTasksWaitingTermination+0x58>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e1      	bne.n	8002aac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2400010c 	.word	0x2400010c
 8002af8:	24000138 	.word	0x24000138
 8002afc:	24000120 	.word	0x24000120

08002b00 <prvDeleteTCB>:


#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fc71 	bl	80033f4 <vPortFree>
                vPortFree( pxTCB );
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 fc6e 	bl	80033f4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <prvResetNextTaskUnblockTime+0x30>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d104      	bne.n	8002b38 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <prvResetNextTaskUnblockTime+0x34>)
 8002b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b34:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b36:	e005      	b.n	8002b44 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <prvResetNextTaskUnblockTime+0x30>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <prvResetNextTaskUnblockTime+0x34>)
 8002b42:	6013      	str	r3, [r2, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	240000f0 	.word	0x240000f0
 8002b54:	24000158 	.word	0x24000158

08002b58 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002b62:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002b68:	4b2e      	ldr	r3, [pc, #184]	; (8002c24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff facc 	bl	800210c <uxListRemove>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002b7a:	4b2a      	ldr	r3, [pc, #168]	; (8002c24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b80:	2201      	movs	r2, #1
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43da      	mvns	r2, r3
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <prvAddCurrentTaskToDelayedList+0xd0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	4a26      	ldr	r2, [pc, #152]	; (8002c28 <prvAddCurrentTaskToDelayedList+0xd0>)
 8002b90:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b98:	d10a      	bne.n	8002bb0 <prvAddCurrentTaskToDelayedList+0x58>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d007      	beq.n	8002bb0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002ba0:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4820      	ldr	r0, [pc, #128]	; (8002c2c <prvAddCurrentTaskToDelayedList+0xd4>)
 8002baa:	f7ff fa52 	bl	8002052 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002bae:	e032      	b.n	8002c16 <prvAddCurrentTaskToDelayedList+0xbe>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002bb8:	4b1a      	ldr	r3, [pc, #104]	; (8002c24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d20f      	bcs.n	8002be8 <prvAddCurrentTaskToDelayedList+0x90>
                    traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002bc8:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2104      	movs	r1, #4
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f002 fb8e 	bl	80052f0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bd4:	4b16      	ldr	r3, [pc, #88]	; (8002c30 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f7ff fa5a 	bl	800209a <vListInsert>
}
 8002be6:	e016      	b.n	8002c16 <prvAddCurrentTaskToDelayedList+0xbe>
                    traceMOVED_TASK_TO_DELAYED_LIST();
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2104      	movs	r1, #4
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f002 fb7e 	bl	80052f0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <prvAddCurrentTaskToDelayedList+0xcc>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f7ff fa4a 	bl	800209a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d202      	bcs.n	8002c16 <prvAddCurrentTaskToDelayedList+0xbe>
                        xNextTaskUnblockTime = xTimeToWake;
 8002c10:	4a09      	ldr	r2, [pc, #36]	; (8002c38 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	6013      	str	r3, [r2, #0]
}
 8002c16:	bf00      	nop
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	2400013c 	.word	0x2400013c
 8002c24:	24000038 	.word	0x24000038
 8002c28:	24000140 	.word	0x24000140
 8002c2c:	24000124 	.word	0x24000124
 8002c30:	240000f4 	.word	0x240000f4
 8002c34:	240000f0 	.word	0x240000f0
 8002c38:	24000158 	.word	0x24000158

08002c3c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	3b04      	subs	r3, #4
 8002c4c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c54:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3b04      	subs	r3, #4
 8002c5a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	f023 0201 	bic.w	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	3b04      	subs	r3, #4
 8002c6a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <pxPortInitialiseStack+0x64>)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b14      	subs	r3, #20
 8002c76:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	3b04      	subs	r3, #4
 8002c82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f06f 0202 	mvn.w	r2, #2
 8002c8a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3b20      	subs	r3, #32
 8002c90:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002c92:	68fb      	ldr	r3, [r7, #12]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	08002ca5 	.word	0x08002ca5

08002ca4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <prvTaskExitError+0x5c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cb6:	d00c      	beq.n	8002cd2 <prvTaskExitError+0x2e>
        __asm volatile
 8002cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cbc:	b672      	cpsid	i
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	b662      	cpsie	i
 8002ccc:	60fb      	str	r3, [r7, #12]
    }
 8002cce:	bf00      	nop
 8002cd0:	e7fe      	b.n	8002cd0 <prvTaskExitError+0x2c>
        __asm volatile
 8002cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd6:	b672      	cpsid	i
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	b662      	cpsie	i
 8002ce6:	60bb      	str	r3, [r7, #8]
    }
 8002ce8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002cea:	bf00      	nop
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0fc      	beq.n	8002cec <prvTaskExitError+0x48>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	24000014 	.word	0x24000014
	...

08002d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002d10:	4b07      	ldr	r3, [pc, #28]	; (8002d30 <pxCurrentTCBConst2>)
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	6808      	ldr	r0, [r1, #0]
 8002d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d1a:	f380 8809 	msr	PSP, r0
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f04f 0000 	mov.w	r0, #0
 8002d26:	f380 8811 	msr	BASEPRI, r0
 8002d2a:	4770      	bx	lr
 8002d2c:	f3af 8000 	nop.w

08002d30 <pxCurrentTCBConst2>:
 8002d30:	24000038 	.word	0x24000038
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop

08002d38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002d38:	4808      	ldr	r0, [pc, #32]	; (8002d5c <prvPortStartFirstTask+0x24>)
 8002d3a:	6800      	ldr	r0, [r0, #0]
 8002d3c:	6800      	ldr	r0, [r0, #0]
 8002d3e:	f380 8808 	msr	MSP, r0
 8002d42:	f04f 0000 	mov.w	r0, #0
 8002d46:	f380 8814 	msr	CONTROL, r0
 8002d4a:	b662      	cpsie	i
 8002d4c:	b661      	cpsie	f
 8002d4e:	f3bf 8f4f 	dsb	sy
 8002d52:	f3bf 8f6f 	isb	sy
 8002d56:	df00      	svc	0
 8002d58:	bf00      	nop
 8002d5a:	0000      	.short	0x0000
 8002d5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002d60:	bf00      	nop
 8002d62:	bf00      	nop

08002d64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002d6a:	4b49      	ldr	r3, [pc, #292]	; (8002e90 <xPortStartScheduler+0x12c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a49      	ldr	r2, [pc, #292]	; (8002e94 <xPortStartScheduler+0x130>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d10c      	bne.n	8002d8e <xPortStartScheduler+0x2a>
        __asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	b672      	cpsid	i
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	b662      	cpsie	i
 8002d88:	613b      	str	r3, [r7, #16]
    }
 8002d8a:	bf00      	nop
 8002d8c:	e7fe      	b.n	8002d8c <xPortStartScheduler+0x28>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002d8e:	4b40      	ldr	r3, [pc, #256]	; (8002e90 <xPortStartScheduler+0x12c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a41      	ldr	r2, [pc, #260]	; (8002e98 <xPortStartScheduler+0x134>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d10c      	bne.n	8002db2 <xPortStartScheduler+0x4e>
        __asm volatile
 8002d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9c:	b672      	cpsid	i
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	b662      	cpsie	i
 8002dac:	60fb      	str	r3, [r7, #12]
    }
 8002dae:	bf00      	nop
 8002db0:	e7fe      	b.n	8002db0 <xPortStartScheduler+0x4c>

 
    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002db2:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <xPortStartScheduler+0x138>)
 8002db4:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	22ff      	movs	r2, #255	; 0xff
 8002dc2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <xPortStartScheduler+0x13c>)
 8002dd8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002dda:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <xPortStartScheduler+0x140>)
 8002ddc:	2207      	movs	r2, #7
 8002dde:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002de0:	e009      	b.n	8002df6 <xPortStartScheduler+0x92>
            {
                ulMaxPRIGROUPValue--;
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <xPortStartScheduler+0x140>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	4a2e      	ldr	r2, [pc, #184]	; (8002ea4 <xPortStartScheduler+0x140>)
 8002dea:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	2b80      	cmp	r3, #128	; 0x80
 8002e00:	d0ef      	beq.n	8002de2 <xPortStartScheduler+0x7e>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <xPortStartScheduler+0x140>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d00c      	beq.n	8002e28 <xPortStartScheduler+0xc4>
        __asm volatile
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	b672      	cpsid	i
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	b662      	cpsie	i
 8002e22:	60bb      	str	r3, [r7, #8]
    }
 8002e24:	bf00      	nop
 8002e26:	e7fe      	b.n	8002e26 <xPortStartScheduler+0xc2>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e28:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <xPortStartScheduler+0x140>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <xPortStartScheduler+0x140>)
 8002e30:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <xPortStartScheduler+0x140>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e3a:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <xPortStartScheduler+0x140>)
 8002e3c:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <xPortStartScheduler+0x144>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <xPortStartScheduler+0x144>)
 8002e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e50:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <xPortStartScheduler+0x144>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a14      	ldr	r2, [pc, #80]	; (8002ea8 <xPortStartScheduler+0x144>)
 8002e58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002e5c:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002e5e:	f000 f96f 	bl	8003140 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002e62:	4b12      	ldr	r3, [pc, #72]	; (8002eac <xPortStartScheduler+0x148>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002e68:	f000 f98e 	bl	8003188 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <xPortStartScheduler+0x14c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a0f      	ldr	r2, [pc, #60]	; (8002eb0 <xPortStartScheduler+0x14c>)
 8002e72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002e76:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002e78:	f7ff ff5e 	bl	8002d38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002e7c:	f7ff fd4e 	bl	800291c <vTaskSwitchContext>
    prvTaskExitError();
 8002e80:	f7ff ff10 	bl	8002ca4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00
 8002e94:	410fc271 	.word	0x410fc271
 8002e98:	410fc270 	.word	0x410fc270
 8002e9c:	e000e400 	.word	0xe000e400
 8002ea0:	24000164 	.word	0x24000164
 8002ea4:	24000168 	.word	0x24000168
 8002ea8:	e000ed20 	.word	0xe000ed20
 8002eac:	24000014 	.word	0x24000014
 8002eb0:	e000ef34 	.word	0xe000ef34

08002eb4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/
void vInitPrioGroupValue(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <vInitPrioGroupValue+0xf0>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a3a      	ldr	r2, [pc, #232]	; (8002fa8 <vInitPrioGroupValue+0xf4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d10c      	bne.n	8002ede <vInitPrioGroupValue+0x2a>
        __asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec8:	b672      	cpsid	i
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	b662      	cpsie	i
 8002ed8:	613b      	str	r3, [r7, #16]
    }
 8002eda:	bf00      	nop
 8002edc:	e7fe      	b.n	8002edc <vInitPrioGroupValue+0x28>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <vInitPrioGroupValue+0xf0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a32      	ldr	r2, [pc, #200]	; (8002fac <vInitPrioGroupValue+0xf8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d10c      	bne.n	8002f02 <vInitPrioGroupValue+0x4e>
        __asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	b672      	cpsid	i
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	b662      	cpsie	i
 8002efc:	60fb      	str	r3, [r7, #12]
    }
 8002efe:	bf00      	nop
 8002f00:	e7fe      	b.n	8002f00 <vInitPrioGroupValue+0x4c>

    #if ( configASSERT_DEFINED == 1 )
     {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002f02:	4b2b      	ldr	r3, [pc, #172]	; (8002fb0 <vInitPrioGroupValue+0xfc>)
 8002f04:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	22ff      	movs	r2, #255	; 0xff
 8002f12:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b23      	ldr	r3, [pc, #140]	; (8002fb4 <vInitPrioGroupValue+0x100>)
 8002f28:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f2a:	4b23      	ldr	r3, [pc, #140]	; (8002fb8 <vInitPrioGroupValue+0x104>)
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f30:	e009      	b.n	8002f46 <vInitPrioGroupValue+0x92>
            {
                ulMaxPRIGROUPValue--;
 8002f32:	4b21      	ldr	r3, [pc, #132]	; (8002fb8 <vInitPrioGroupValue+0x104>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <vInitPrioGroupValue+0x104>)
 8002f3a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002f3c:	78fb      	ldrb	r3, [r7, #3]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4e:	2b80      	cmp	r3, #128	; 0x80
 8002f50:	d0ef      	beq.n	8002f32 <vInitPrioGroupValue+0x7e>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f52:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <vInitPrioGroupValue+0x104>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f1c3 0307 	rsb	r3, r3, #7
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d00c      	beq.n	8002f78 <vInitPrioGroupValue+0xc4>
        __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	b672      	cpsid	i
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	b662      	cpsie	i
 8002f72:	60bb      	str	r3, [r7, #8]
    }
 8002f74:	bf00      	nop
 8002f76:	e7fe      	b.n	8002f76 <vInitPrioGroupValue+0xc2>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f78:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <vInitPrioGroupValue+0x104>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	021b      	lsls	r3, r3, #8
 8002f7e:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <vInitPrioGroupValue+0x104>)
 8002f80:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <vInitPrioGroupValue+0x104>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <vInitPrioGroupValue+0x104>)
 8002f8c:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002f96:	bf00      	nop
 8002f98:	371c      	adds	r7, #28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000ed00 	.word	0xe000ed00
 8002fa8:	410fc271 	.word	0x410fc271
 8002fac:	410fc270 	.word	0x410fc270
 8002fb0:	e000e400 	.word	0xe000e400
 8002fb4:	24000164 	.word	0x24000164
 8002fb8:	24000168 	.word	0x24000168

08002fbc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
        __asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	b672      	cpsid	i
 8002fc8:	f383 8811 	msr	BASEPRI, r3
 8002fcc:	f3bf 8f6f 	isb	sy
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	b662      	cpsie	i
 8002fd6:	607b      	str	r3, [r7, #4]
    }
 8002fd8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <vPortEnterCritical+0x60>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	4a0e      	ldr	r2, [pc, #56]	; (800301c <vPortEnterCritical+0x60>)
 8002fe2:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002fe4:	4b0d      	ldr	r3, [pc, #52]	; (800301c <vPortEnterCritical+0x60>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d111      	bne.n	8003010 <vPortEnterCritical+0x54>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <vPortEnterCritical+0x64>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00c      	beq.n	8003010 <vPortEnterCritical+0x54>
        __asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffa:	b672      	cpsid	i
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	b662      	cpsie	i
 800300a:	603b      	str	r3, [r7, #0]
    }
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <vPortEnterCritical+0x52>
    }
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr
 800301c:	24000014 	.word	0x24000014
 8003020:	e000ed04 	.word	0xe000ed04

08003024 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800302a:	4b13      	ldr	r3, [pc, #76]	; (8003078 <vPortExitCritical+0x54>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10c      	bne.n	800304c <vPortExitCritical+0x28>
        __asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	b672      	cpsid	i
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	b662      	cpsie	i
 8003046:	607b      	str	r3, [r7, #4]
    }
 8003048:	bf00      	nop
 800304a:	e7fe      	b.n	800304a <vPortExitCritical+0x26>
    uxCriticalNesting--;
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <vPortExitCritical+0x54>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3b01      	subs	r3, #1
 8003052:	4a09      	ldr	r2, [pc, #36]	; (8003078 <vPortExitCritical+0x54>)
 8003054:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <vPortExitCritical+0x54>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d105      	bne.n	800306a <vPortExitCritical+0x46>
 800305e:	2300      	movs	r3, #0
 8003060:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003068:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	24000014 	.word	0x24000014
 800307c:	00000000 	.word	0x00000000

08003080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003080:	f3ef 8009 	mrs	r0, PSP
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <pxCurrentTCBConst>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	f01e 0f10 	tst.w	lr, #16
 8003090:	bf08      	it	eq
 8003092:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003096:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800309a:	6010      	str	r0, [r2, #0]
 800309c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80030a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80030a4:	b672      	cpsid	i
 80030a6:	f380 8811 	msr	BASEPRI, r0
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	b662      	cpsie	i
 80030b4:	f7ff fc32 	bl	800291c <vTaskSwitchContext>
 80030b8:	f04f 0000 	mov.w	r0, #0
 80030bc:	f380 8811 	msr	BASEPRI, r0
 80030c0:	bc09      	pop	{r0, r3}
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	6808      	ldr	r0, [r1, #0]
 80030c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ca:	f01e 0f10 	tst.w	lr, #16
 80030ce:	bf08      	it	eq
 80030d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030d4:	f380 8809 	msr	PSP, r0
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop

080030e0 <pxCurrentTCBConst>:
 80030e0:	24000038 	.word	0x24000038
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030e4:	bf00      	nop
 80030e6:	bf00      	nop

080030e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
        __asm volatile
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	b672      	cpsid	i
 80030f4:	f383 8811 	msr	BASEPRI, r3
 80030f8:	f3bf 8f6f 	isb	sy
 80030fc:	f3bf 8f4f 	dsb	sy
 8003100:	b662      	cpsie	i
 8003102:	607b      	str	r3, [r7, #4]
    }
 8003104:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003106:	f001 ff97 	bl	8005038 <SEGGER_SYSVIEW_RecordEnterISR>

    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800310a:	f7ff fb49 	bl	80027a0 <xTaskIncrementTick>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <SysTick_Handler+0x3a>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003114:	f001 ffee 	bl	80050f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003118:	4b08      	ldr	r3, [pc, #32]	; (800313c <SysTick_Handler+0x54>)
 800311a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	e001      	b.n	8003126 <SysTick_Handler+0x3e>
        }
        else
        {
            traceISR_EXIT();
 8003122:	f001 ffcb 	bl	80050bc <SEGGER_SYSVIEW_RecordExitISR>
 8003126:	2300      	movs	r3, #0
 8003128:	603b      	str	r3, [r7, #0]
        __asm volatile
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	f383 8811 	msr	BASEPRI, r3
    }
 8003130:	bf00      	nop
        }


    }
    portENABLE_INTERRUPTS();
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003140:	b480      	push	{r7}
 8003142:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003144:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <vPortSetupTimerInterrupt+0x34>)
 8003146:	2200      	movs	r2, #0
 8003148:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <vPortSetupTimerInterrupt+0x38>)
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003150:	4b0a      	ldr	r3, [pc, #40]	; (800317c <vPortSetupTimerInterrupt+0x3c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a0a      	ldr	r2, [pc, #40]	; (8003180 <vPortSetupTimerInterrupt+0x40>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	099b      	lsrs	r3, r3, #6
 800315c:	4a09      	ldr	r2, [pc, #36]	; (8003184 <vPortSetupTimerInterrupt+0x44>)
 800315e:	3b01      	subs	r3, #1
 8003160:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <vPortSetupTimerInterrupt+0x34>)
 8003164:	2207      	movs	r2, #7
 8003166:	601a      	str	r2, [r3, #0]
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	e000e010 	.word	0xe000e010
 8003178:	e000e018 	.word	0xe000e018
 800317c:	24000000 	.word	0x24000000
 8003180:	10624dd3 	.word	0x10624dd3
 8003184:	e000e014 	.word	0xe000e014

08003188 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003188:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003198 <vPortEnableVFP+0x10>
 800318c:	6801      	ldr	r1, [r0, #0]
 800318e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003192:	6001      	str	r1, [r0, #0]
 8003194:	4770      	bx	lr
 8003196:	0000      	.short	0x0000
 8003198:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800319c:	bf00      	nop
 800319e:	bf00      	nop

080031a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80031a6:	f3ef 8305 	mrs	r3, IPSR
 80031aa:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	d916      	bls.n	80031e0 <vPortValidateInterruptPriority+0x40>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80031b2:	4a19      	ldr	r2, [pc, #100]	; (8003218 <vPortValidateInterruptPriority+0x78>)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80031bc:	4b17      	ldr	r3, [pc, #92]	; (800321c <vPortValidateInterruptPriority+0x7c>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	7afa      	ldrb	r2, [r7, #11]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d20c      	bcs.n	80031e0 <vPortValidateInterruptPriority+0x40>
        __asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	b672      	cpsid	i
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	b662      	cpsie	i
 80031da:	607b      	str	r3, [r7, #4]
    }
 80031dc:	bf00      	nop
 80031de:	e7fe      	b.n	80031de <vPortValidateInterruptPriority+0x3e>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80031e0:	4b0f      	ldr	r3, [pc, #60]	; (8003220 <vPortValidateInterruptPriority+0x80>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <vPortValidateInterruptPriority+0x84>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d90c      	bls.n	800320a <vPortValidateInterruptPriority+0x6a>
        __asm volatile
 80031f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f4:	b672      	cpsid	i
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	b662      	cpsie	i
 8003204:	603b      	str	r3, [r7, #0]
    }
 8003206:	bf00      	nop
 8003208:	e7fe      	b.n	8003208 <vPortValidateInterruptPriority+0x68>
    }
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000e3f0 	.word	0xe000e3f0
 800321c:	24000164 	.word	0x24000164
 8003220:	e000ed0c 	.word	0xe000ed0c
 8003224:	24000168 	.word	0x24000168

08003228 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003230:	2300      	movs	r3, #0
 8003232:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003234:	f7ff f9e2 	bl	80025fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003238:	4b68      	ldr	r3, [pc, #416]	; (80033dc <pvPortMalloc+0x1b4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003240:	f000 f93e 	bl	80034c0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003244:	4b66      	ldr	r3, [pc, #408]	; (80033e0 <pvPortMalloc+0x1b8>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	f040 80ab 	bne.w	80033a8 <pvPortMalloc+0x180>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d02f      	beq.n	80032b8 <pvPortMalloc+0x90>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003258:	2208      	movs	r2, #8
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	429a      	cmp	r2, r3
 8003262:	d229      	bcs.n	80032b8 <pvPortMalloc+0x90>
            {
                xWantedSize += xHeapStructSize;
 8003264:	2208      	movs	r2, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	2b00      	cmp	r3, #0
 8003274:	d023      	beq.n	80032be <pvPortMalloc+0x96>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f023 0307 	bic.w	r3, r3, #7
 800327c:	3308      	adds	r3, #8
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	429a      	cmp	r2, r3
 8003282:	d216      	bcs.n	80032b2 <pvPortMalloc+0x8a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f023 0307 	bic.w	r3, r3, #7
 800328a:	3308      	adds	r3, #8
 800328c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <pvPortMalloc+0x96>
        __asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	b672      	cpsid	i
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	b662      	cpsie	i
 80032ac:	617b      	str	r3, [r7, #20]
    }
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <pvPortMalloc+0x88>
                    }
                    else
                    {
                        xWantedSize = 0;
 80032b2:	2300      	movs	r3, #0
 80032b4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032b6:	e002      	b.n	80032be <pvPortMalloc+0x96>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80032b8:	2300      	movs	r3, #0
 80032ba:	607b      	str	r3, [r7, #4]
 80032bc:	e000      	b.n	80032c0 <pvPortMalloc+0x98>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032be:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d070      	beq.n	80033a8 <pvPortMalloc+0x180>
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <pvPortMalloc+0x1bc>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d86b      	bhi.n	80033a8 <pvPortMalloc+0x180>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80032d0:	4b45      	ldr	r3, [pc, #276]	; (80033e8 <pvPortMalloc+0x1c0>)
 80032d2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80032d4:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <pvPortMalloc+0x1c0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032da:	e004      	b.n	80032e6 <pvPortMalloc+0xbe>
                {
                    pxPreviousBlock = pxBlock;
 80032dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032de:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d903      	bls.n	80032f8 <pvPortMalloc+0xd0>
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f1      	bne.n	80032dc <pvPortMalloc+0xb4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80032f8:	4b38      	ldr	r3, [pc, #224]	; (80033dc <pvPortMalloc+0x1b4>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032fe:	429a      	cmp	r2, r3
 8003300:	d052      	beq.n	80033a8 <pvPortMalloc+0x180>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2208      	movs	r2, #8
 8003308:	4413      	add	r3, r2
 800330a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	1ad2      	subs	r2, r2, r3
 800331c:	2308      	movs	r3, #8
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	429a      	cmp	r2, r3
 8003322:	d921      	bls.n	8003368 <pvPortMalloc+0x140>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00c      	beq.n	8003350 <pvPortMalloc+0x128>
        __asm volatile
 8003336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333a:	b672      	cpsid	i
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	b662      	cpsie	i
 800334a:	613b      	str	r3, [r7, #16]
    }
 800334c:	bf00      	nop
 800334e:	e7fe      	b.n	800334e <pvPortMalloc+0x126>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003362:	69b8      	ldr	r0, [r7, #24]
 8003364:	f000 f90e 	bl	8003584 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003368:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <pvPortMalloc+0x1bc>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <pvPortMalloc+0x1bc>)
 8003374:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003376:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <pvPortMalloc+0x1bc>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <pvPortMalloc+0x1c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d203      	bcs.n	800338a <pvPortMalloc+0x162>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003382:	4b18      	ldr	r3, [pc, #96]	; (80033e4 <pvPortMalloc+0x1bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a19      	ldr	r2, [pc, #100]	; (80033ec <pvPortMalloc+0x1c4>)
 8003388:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <pvPortMalloc+0x1b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	431a      	orrs	r2, r3
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800339e:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <pvPortMalloc+0x1c8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3301      	adds	r3, #1
 80033a4:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <pvPortMalloc+0x1c8>)
 80033a6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80033a8:	f7ff f936 	bl	8002618 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00c      	beq.n	80033d0 <pvPortMalloc+0x1a8>
        __asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ba:	b672      	cpsid	i
 80033bc:	f383 8811 	msr	BASEPRI, r3
 80033c0:	f3bf 8f6f 	isb	sy
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	b662      	cpsie	i
 80033ca:	60fb      	str	r3, [r7, #12]
    }
 80033cc:	bf00      	nop
 80033ce:	e7fe      	b.n	80033ce <pvPortMalloc+0x1a6>
    return pvReturn;
 80033d0:	69fb      	ldr	r3, [r7, #28]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3728      	adds	r7, #40	; 0x28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	24005174 	.word	0x24005174
 80033e0:	24005188 	.word	0x24005188
 80033e4:	24005178 	.word	0x24005178
 80033e8:	2400516c 	.word	0x2400516c
 80033ec:	2400517c 	.word	0x2400517c
 80033f0:	24005180 	.word	0x24005180

080033f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d051      	beq.n	80034aa <vPortFree+0xb6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003406:	2308      	movs	r3, #8
 8003408:	425b      	negs	r3, r3
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4413      	add	r3, r2
 800340e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <vPortFree+0xc0>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4013      	ands	r3, r2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10c      	bne.n	800343c <vPortFree+0x48>
        __asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	b672      	cpsid	i
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	b662      	cpsie	i
 8003436:	60fb      	str	r3, [r7, #12]
    }
 8003438:	bf00      	nop
 800343a:	e7fe      	b.n	800343a <vPortFree+0x46>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00c      	beq.n	800345e <vPortFree+0x6a>
        __asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	b672      	cpsid	i
 800344a:	f383 8811 	msr	BASEPRI, r3
 800344e:	f3bf 8f6f 	isb	sy
 8003452:	f3bf 8f4f 	dsb	sy
 8003456:	b662      	cpsie	i
 8003458:	60bb      	str	r3, [r7, #8]
    }
 800345a:	bf00      	nop
 800345c:	e7fe      	b.n	800345c <vPortFree+0x68>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <vPortFree+0xc0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d01e      	beq.n	80034aa <vPortFree+0xb6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d11a      	bne.n	80034aa <vPortFree+0xb6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <vPortFree+0xc0>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	43db      	mvns	r3, r3
 800347e:	401a      	ands	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003484:	f7ff f8ba 	bl	80025fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <vPortFree+0xc4>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4413      	add	r3, r2
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <vPortFree+0xc4>)
 8003494:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003496:	6938      	ldr	r0, [r7, #16]
 8003498:	f000 f874 	bl	8003584 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <vPortFree+0xc8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3301      	adds	r3, #1
 80034a2:	4a06      	ldr	r2, [pc, #24]	; (80034bc <vPortFree+0xc8>)
 80034a4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80034a6:	f7ff f8b7 	bl	8002618 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80034aa:	bf00      	nop
 80034ac:	3718      	adds	r7, #24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	24005188 	.word	0x24005188
 80034b8:	24005178 	.word	0x24005178
 80034bc:	24005184 	.word	0x24005184

080034c0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80034c6:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80034ca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80034cc:	4b27      	ldr	r3, [pc, #156]	; (800356c <prvHeapInit+0xac>)
 80034ce:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00c      	beq.n	80034f4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	3307      	adds	r3, #7
 80034de:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0307 	bic.w	r3, r3, #7
 80034e6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	4a1f      	ldr	r2, [pc, #124]	; (800356c <prvHeapInit+0xac>)
 80034f0:	4413      	add	r3, r2
 80034f2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80034f8:	4a1d      	ldr	r2, [pc, #116]	; (8003570 <prvHeapInit+0xb0>)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80034fe:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <prvHeapInit+0xb0>)
 8003500:	2200      	movs	r2, #0
 8003502:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	4413      	add	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800350c:	2208      	movs	r2, #8
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0307 	bic.w	r3, r3, #7
 800351a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4a15      	ldr	r2, [pc, #84]	; (8003574 <prvHeapInit+0xb4>)
 8003520:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <prvHeapInit+0xb4>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2200      	movs	r2, #0
 8003528:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <prvHeapInit+0xb4>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	1ad2      	subs	r2, r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <prvHeapInit+0xb4>)
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <prvHeapInit+0xb8>)
 800354e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4a09      	ldr	r2, [pc, #36]	; (800357c <prvHeapInit+0xbc>)
 8003556:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <prvHeapInit+0xc0>)
 800355a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800355e:	601a      	str	r2, [r3, #0]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	2400016c 	.word	0x2400016c
 8003570:	2400516c 	.word	0x2400516c
 8003574:	24005174 	.word	0x24005174
 8003578:	2400517c 	.word	0x2400517c
 800357c:	24005178 	.word	0x24005178
 8003580:	24005188 	.word	0x24005188

08003584 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800358c:	4b28      	ldr	r3, [pc, #160]	; (8003630 <prvInsertBlockIntoFreeList+0xac>)
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e002      	b.n	8003598 <prvInsertBlockIntoFreeList+0x14>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d8f7      	bhi.n	8003592 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	4413      	add	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d108      	bne.n	80035c6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	441a      	add	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	441a      	add	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d118      	bne.n	800360c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	4b15      	ldr	r3, [pc, #84]	; (8003634 <prvInsertBlockIntoFreeList+0xb0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d00d      	beq.n	8003602 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	441a      	add	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	e008      	b.n	8003614 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <prvInsertBlockIntoFreeList+0xb0>)
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e003      	b.n	8003614 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	429a      	cmp	r2, r3
 800361a:	d002      	beq.n	8003622 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003622:	bf00      	nop
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	2400516c 	.word	0x2400516c
 8003634:	24005174 	.word	0x24005174

08003638 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800363c:	4803      	ldr	r0, [pc, #12]	; (800364c <_cbSendSystemDesc+0x14>)
 800363e:	f001 fca5 	bl	8004f8c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003642:	4803      	ldr	r0, [pc, #12]	; (8003650 <_cbSendSystemDesc+0x18>)
 8003644:	f001 fca2 	bl	8004f8c <SEGGER_SYSVIEW_SendSysDesc>
}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}
 800364c:	08005734 	.word	0x08005734
 8003650:	08005770 	.word	0x08005770

08003654 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003658:	4b06      	ldr	r3, [pc, #24]	; (8003674 <SEGGER_SYSVIEW_Conf+0x20>)
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	4b05      	ldr	r3, [pc, #20]	; (8003674 <SEGGER_SYSVIEW_Conf+0x20>)
 800365e:	6819      	ldr	r1, [r3, #0]
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <SEGGER_SYSVIEW_Conf+0x24>)
 8003662:	4a06      	ldr	r2, [pc, #24]	; (800367c <SEGGER_SYSVIEW_Conf+0x28>)
 8003664:	f001 f918 	bl	8004898 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003668:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800366c:	f001 f958 	bl	8004920 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003670:	bf00      	nop
 8003672:	bd80      	pop	{r7, pc}
 8003674:	24000000 	.word	0x24000000
 8003678:	08003639 	.word	0x08003639
 800367c:	080057fc 	.word	0x080057fc

08003680 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	b085      	sub	sp, #20
 8003684:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003686:	2300      	movs	r3, #0
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e033      	b.n	80036f4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800368c:	491e      	ldr	r1, [pc, #120]	; (8003708 <_cbSendTaskList+0x88>)
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	491a      	ldr	r1, [pc, #104]	; (8003708 <_cbSendTaskList+0x88>)
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	3304      	adds	r3, #4
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	4c16      	ldr	r4, [pc, #88]	; (8003708 <_cbSendTaskList+0x88>)
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4423      	add	r3, r4
 80036bc:	3308      	adds	r3, #8
 80036be:	681c      	ldr	r4, [r3, #0]
 80036c0:	4d11      	ldr	r5, [pc, #68]	; (8003708 <_cbSendTaskList+0x88>)
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	442b      	add	r3, r5
 80036ce:	330c      	adds	r3, #12
 80036d0:	681d      	ldr	r5, [r3, #0]
 80036d2:	4e0d      	ldr	r6, [pc, #52]	; (8003708 <_cbSendTaskList+0x88>)
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4433      	add	r3, r6
 80036e0:	3310      	adds	r3, #16
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	462b      	mov	r3, r5
 80036e8:	4622      	mov	r2, r4
 80036ea:	f000 f8bd 	bl	8003868 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3301      	adds	r3, #1
 80036f2:	607b      	str	r3, [r7, #4]
 80036f4:	4b05      	ldr	r3, [pc, #20]	; (800370c <_cbSendTaskList+0x8c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d3c6      	bcc.n	800368c <_cbSendTaskList+0xc>
  }
}
 80036fe:	bf00      	nop
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003708:	2400518c 	.word	0x2400518c
 800370c:	2400522c 	.word	0x2400522c

08003710 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003718:	f7ff f830 	bl	800277c <xTaskGetTickCountFromISR>
 800371c:	4603      	mov	r3, r0
 800371e:	2200      	movs	r2, #0
 8003720:	469a      	mov	sl, r3
 8003722:	4693      	mov	fp, r2
 8003724:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003728:	e9d7 0100 	ldrd	r0, r1, [r7]
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	f04f 0a00 	mov.w	sl, #0
 8003734:	f04f 0b00 	mov.w	fp, #0
 8003738:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800373c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003740:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003744:	4652      	mov	r2, sl
 8003746:	465b      	mov	r3, fp
 8003748:	1a14      	subs	r4, r2, r0
 800374a:	eb63 0501 	sbc.w	r5, r3, r1
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	00ab      	lsls	r3, r5, #2
 8003758:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800375c:	00a2      	lsls	r2, r4, #2
 800375e:	4614      	mov	r4, r2
 8003760:	461d      	mov	r5, r3
 8003762:	eb14 0800 	adds.w	r8, r4, r0
 8003766:	eb45 0901 	adc.w	r9, r5, r1
 800376a:	f04f 0200 	mov.w	r2, #0
 800376e:	f04f 0300 	mov.w	r3, #0
 8003772:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003776:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800377a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800377e:	4690      	mov	r8, r2
 8003780:	4699      	mov	r9, r3
 8003782:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003786:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003798 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80037a6:	2205      	movs	r2, #5
 80037a8:	492b      	ldr	r1, [pc, #172]	; (8003858 <SYSVIEW_AddTask+0xc0>)
 80037aa:	68b8      	ldr	r0, [r7, #8]
 80037ac:	f001 ff70 	bl	8005690 <memcmp>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d04b      	beq.n	800384e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80037b6:	4b29      	ldr	r3, [pc, #164]	; (800385c <SYSVIEW_AddTask+0xc4>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2b07      	cmp	r3, #7
 80037bc:	d903      	bls.n	80037c6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80037be:	4828      	ldr	r0, [pc, #160]	; (8003860 <SYSVIEW_AddTask+0xc8>)
 80037c0:	f001 fee6 	bl	8005590 <SEGGER_SYSVIEW_Warn>
    return;
 80037c4:	e044      	b.n	8003850 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80037c6:	4b25      	ldr	r3, [pc, #148]	; (800385c <SYSVIEW_AddTask+0xc4>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	4926      	ldr	r1, [pc, #152]	; (8003864 <SYSVIEW_AddTask+0xcc>)
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <SYSVIEW_AddTask+0xc4>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4921      	ldr	r1, [pc, #132]	; (8003864 <SYSVIEW_AddTask+0xcc>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	3304      	adds	r3, #4
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <SYSVIEW_AddTask+0xc4>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	491b      	ldr	r1, [pc, #108]	; (8003864 <SYSVIEW_AddTask+0xcc>)
 80037f6:	4613      	mov	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	3308      	adds	r3, #8
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003806:	4b15      	ldr	r3, [pc, #84]	; (800385c <SYSVIEW_AddTask+0xc4>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	4916      	ldr	r1, [pc, #88]	; (8003864 <SYSVIEW_AddTask+0xcc>)
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	330c      	adds	r3, #12
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800381c:	4b0f      	ldr	r3, [pc, #60]	; (800385c <SYSVIEW_AddTask+0xc4>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4910      	ldr	r1, [pc, #64]	; (8003864 <SYSVIEW_AddTask+0xcc>)
 8003822:	4613      	mov	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	3310      	adds	r3, #16
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <SYSVIEW_AddTask+0xc4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3301      	adds	r3, #1
 8003838:	4a08      	ldr	r2, [pc, #32]	; (800385c <SYSVIEW_AddTask+0xc4>)
 800383a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800383c:	69bb      	ldr	r3, [r7, #24]
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68b9      	ldr	r1, [r7, #8]
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f80e 	bl	8003868 <SYSVIEW_SendTaskInfo>
 800384c:	e000      	b.n	8003850 <SYSVIEW_AddTask+0xb8>
    return;
 800384e:	bf00      	nop

}
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	08005780 	.word	0x08005780
 800385c:	2400522c 	.word	0x2400522c
 8003860:	08005788 	.word	0x08005788
 8003864:	2400518c 	.word	0x2400518c

08003868 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	; 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003876:	f107 0314 	add.w	r3, r7, #20
 800387a:	2214      	movs	r2, #20
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f001 ff24 	bl	80056cc <memset>
  TaskInfo.TaskID     = TaskID;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4618      	mov	r0, r3
 800389e:	f001 fa7d 	bl	8004d9c <SEGGER_SYSVIEW_SendTaskInfo>
}
 80038a2:	bf00      	nop
 80038a4:	3728      	adds	r7, #40	; 0x28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
	...

080038ac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80038b2:	4b26      	ldr	r3, [pc, #152]	; (800394c <_DoInit+0xa0>)
 80038b4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80038b6:	22a8      	movs	r2, #168	; 0xa8
 80038b8:	2100      	movs	r1, #0
 80038ba:	6838      	ldr	r0, [r7, #0]
 80038bc:	f001 ff06 	bl	80056cc <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2203      	movs	r2, #3
 80038c4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2203      	movs	r2, #3
 80038ca:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4a20      	ldr	r2, [pc, #128]	; (8003950 <_DoInit+0xa4>)
 80038d0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <_DoInit+0xa8>)
 80038d6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038de:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2200      	movs	r2, #0
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	4a16      	ldr	r2, [pc, #88]	; (8003950 <_DoInit+0xa4>)
 80038f6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4a17      	ldr	r2, [pc, #92]	; (8003958 <_DoInit+0xac>)
 80038fc:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2210      	movs	r2, #16
 8003902:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2200      	movs	r2, #0
 800390e:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2200      	movs	r2, #0
 8003914:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003916:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800391a:	2300      	movs	r3, #0
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	e00c      	b.n	800393a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f1c3 030f 	rsb	r3, r3, #15
 8003926:	4a0d      	ldr	r2, [pc, #52]	; (800395c <_DoInit+0xb0>)
 8003928:	5cd1      	ldrb	r1, [r2, r3]
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4413      	add	r3, r2
 8003930:	460a      	mov	r2, r1
 8003932:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3301      	adds	r3, #1
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b0f      	cmp	r3, #15
 800393e:	d9ef      	bls.n	8003920 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003940:	f3bf 8f5f 	dmb	sy
}
 8003944:	bf00      	nop
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	24005230 	.word	0x24005230
 8003950:	080057d8 	.word	0x080057d8
 8003954:	240052d8 	.word	0x240052d8
 8003958:	240056d8 	.word	0x240056d8
 800395c:	08005804 	.word	0x08005804

08003960 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003960:	b580      	push	{r7, lr}
 8003962:	b08c      	sub	sp, #48	; 0x30
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800396c:	4b3e      	ldr	r3, [pc, #248]	; (8003a68 <SEGGER_RTT_ReadNoLock+0x108>)
 800396e:	623b      	str	r3, [r7, #32]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <SEGGER_RTT_ReadNoLock+0x1e>
 800397a:	f7ff ff97 	bl	80038ac <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	3360      	adds	r3, #96	; 0x60
 800398a:	4a37      	ldr	r2, [pc, #220]	; (8003a68 <SEGGER_RTT_ReadNoLock+0x108>)
 800398c:	4413      	add	r3, r2
 800398e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80039a0:	2300      	movs	r3, #0
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80039a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d92b      	bls.n	8003a04 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4293      	cmp	r3, r2
 80039bc:	bf28      	it	cs
 80039be:	4613      	movcs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c8:	4413      	add	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	6939      	ldr	r1, [r7, #16]
 80039d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039d2:	f001 fe6d 	bl	80056b0 <memcpy>
    NumBytesRead += NumBytesRem;
 80039d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	4413      	add	r3, r2
 80039dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80039de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4413      	add	r3, r2
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80039ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	4413      	add	r3, r2
 80039f4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d101      	bne.n	8003a04 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003a00:	2300      	movs	r3, #0
 8003a02:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4293      	cmp	r3, r2
 8003a12:	bf28      	it	cs
 8003a14:	4613      	movcs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d019      	beq.n	8003a52 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a24:	4413      	add	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	6939      	ldr	r1, [r7, #16]
 8003a2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a2e:	f001 fe3f 	bl	80056b0 <memcpy>
    NumBytesRead += NumBytesRem;
 8003a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	4413      	add	r3, r2
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	4413      	add	r3, r2
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	4413      	add	r3, r2
 8003a50:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3730      	adds	r7, #48	; 0x30
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	24005230 	.word	0x24005230

08003a6c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
 8003a78:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003a7a:	4b3d      	ldr	r3, [pc, #244]	; (8003b70 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003a7c:	61bb      	str	r3, [r7, #24]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003a88:	f7ff ff10 	bl	80038ac <_DoInit>
  SEGGER_RTT_LOCK();
 8003a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a90:	f04f 0120 	mov.w	r1, #32
 8003a94:	f381 8811 	msr	BASEPRI, r1
 8003a98:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003a9a:	4b35      	ldr	r3, [pc, #212]	; (8003b70 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003a9c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003aa2:	6939      	ldr	r1, [r7, #16]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d008      	beq.n	8003acc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	69fa      	ldr	r2, [r7, #28]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	dbeb      	blt.n	8003aa2 <SEGGER_RTT_AllocUpBuffer+0x36>
 8003aca:	e000      	b.n	8003ace <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003acc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	da3f      	bge.n	8003b58 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003ad8:	6939      	ldr	r1, [r7, #16]
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	4613      	mov	r3, r2
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	4413      	add	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	440b      	add	r3, r1
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003aec:	6939      	ldr	r1, [r7, #16]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	1c5a      	adds	r2, r3, #1
 8003af2:	4613      	mov	r3, r2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	4413      	add	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	440b      	add	r3, r1
 8003afc:	3304      	adds	r3, #4
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003b02:	6939      	ldr	r1, [r7, #16]
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	4613      	mov	r3, r2
 8003b08:	005b      	lsls	r3, r3, #1
 8003b0a:	4413      	add	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	440b      	add	r3, r1
 8003b10:	3320      	adds	r3, #32
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003b16:	6939      	ldr	r1, [r7, #16]
 8003b18:	69fa      	ldr	r2, [r7, #28]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	4413      	add	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	440b      	add	r3, r1
 8003b24:	3328      	adds	r3, #40	; 0x28
 8003b26:	2200      	movs	r2, #0
 8003b28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003b2a:	6939      	ldr	r1, [r7, #16]
 8003b2c:	69fa      	ldr	r2, [r7, #28]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	4413      	add	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	440b      	add	r3, r1
 8003b38:	3324      	adds	r3, #36	; 0x24
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003b3e:	6939      	ldr	r1, [r7, #16]
 8003b40:	69fa      	ldr	r2, [r7, #28]
 8003b42:	4613      	mov	r3, r2
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	4413      	add	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	440b      	add	r3, r1
 8003b4c:	332c      	adds	r3, #44	; 0x2c
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003b52:	f3bf 8f5f 	dmb	sy
 8003b56:	e002      	b.n	8003b5e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003b58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b5c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003b64:	69fb      	ldr	r3, [r7, #28]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3720      	adds	r7, #32
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	24005230 	.word	0x24005230

08003b74 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	; 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003b82:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003b84:	623b      	str	r3, [r7, #32]
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003b90:	f7ff fe8c 	bl	80038ac <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003b94:	4b1c      	ldr	r3, [pc, #112]	; (8003c08 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003b96:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d82c      	bhi.n	8003bf8 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003b9e:	f3ef 8311 	mrs	r3, BASEPRI
 8003ba2:	f04f 0120 	mov.w	r1, #32
 8003ba6:	f381 8811 	msr	BASEPRI, r1
 8003baa:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	3360      	adds	r3, #96	; 0x60
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	4413      	add	r3, r2
 8003bbc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2200      	movs	r2, #0
 8003be0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003be6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003be8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf6:	e002      	b.n	8003bfe <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3728      	adds	r7, #40	; 0x28
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	24005230 	.word	0x24005230

08003c0c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003c0c:	b480      	push	{r7}
 8003c0e:	b087      	sub	sp, #28
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00f      	beq.n	8003c42 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8003c22:	e002      	b.n	8003c2a <_EncodeStr+0x1e>
      Len++;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	3301      	adds	r3, #1
 8003c28:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f6      	bne.n	8003c24 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d901      	bls.n	8003c42 <_EncodeStr+0x36>
      Len = Limit;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2bfe      	cmp	r3, #254	; 0xfe
 8003c46:	d806      	bhi.n	8003c56 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	60fa      	str	r2, [r7, #12]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]
 8003c54:	e011      	b.n	8003c7a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	60fa      	str	r2, [r7, #12]
 8003c5c:	22ff      	movs	r2, #255	; 0xff
 8003c5e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	60fa      	str	r2, [r7, #12]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	0a19      	lsrs	r1, r3, #8
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	60fa      	str	r2, [r7, #12]
 8003c76:	b2ca      	uxtb	r2, r1
 8003c78:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c7e:	e00a      	b.n	8003c96 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	1c53      	adds	r3, r2, #1
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	1c59      	adds	r1, r3, #1
 8003c8a:	60f9      	str	r1, [r7, #12]
 8003c8c:	7812      	ldrb	r2, [r2, #0]
 8003c8e:	701a      	strb	r2, [r3, #0]
    n++;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	3301      	adds	r3, #1
 8003c94:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d3f0      	bcc.n	8003c80 <_EncodeStr+0x74>
  }
  return pPayload;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	371c      	adds	r7, #28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3307      	adds	r3, #7
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003cca:	4b35      	ldr	r3, [pc, #212]	; (8003da0 <_HandleIncomingPacket+0xdc>)
 8003ccc:	7e1b      	ldrb	r3, [r3, #24]
 8003cce:	4618      	mov	r0, r3
 8003cd0:	1cfb      	adds	r3, r7, #3
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f7ff fe43 	bl	8003960 <SEGGER_RTT_ReadNoLock>
 8003cda:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d052      	beq.n	8003d88 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 8003ce2:	78fb      	ldrb	r3, [r7, #3]
 8003ce4:	2b80      	cmp	r3, #128	; 0x80
 8003ce6:	d031      	beq.n	8003d4c <_HandleIncomingPacket+0x88>
 8003ce8:	2b80      	cmp	r3, #128	; 0x80
 8003cea:	dc40      	bgt.n	8003d6e <_HandleIncomingPacket+0xaa>
 8003cec:	2b07      	cmp	r3, #7
 8003cee:	dc15      	bgt.n	8003d1c <_HandleIncomingPacket+0x58>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	dd3c      	ble.n	8003d6e <_HandleIncomingPacket+0xaa>
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	2b06      	cmp	r3, #6
 8003cf8:	d839      	bhi.n	8003d6e <_HandleIncomingPacket+0xaa>
 8003cfa:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <_HandleIncomingPacket+0x3c>)
 8003cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d00:	08003d23 	.word	0x08003d23
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d2f 	.word	0x08003d2f
 8003d0c:	08003d35 	.word	0x08003d35
 8003d10:	08003d3b 	.word	0x08003d3b
 8003d14:	08003d41 	.word	0x08003d41
 8003d18:	08003d47 	.word	0x08003d47
 8003d1c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d1e:	d035      	beq.n	8003d8c <_HandleIncomingPacket+0xc8>
 8003d20:	e025      	b.n	8003d6e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003d22:	f000 fec1 	bl	8004aa8 <SEGGER_SYSVIEW_Start>
      break;
 8003d26:	e036      	b.n	8003d96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003d28:	f000 ff78 	bl	8004c1c <SEGGER_SYSVIEW_Stop>
      break;
 8003d2c:	e033      	b.n	8003d96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003d2e:	f001 f951 	bl	8004fd4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003d32:	e030      	b.n	8003d96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003d34:	f001 f916 	bl	8004f64 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003d38:	e02d      	b.n	8003d96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003d3a:	f000 ff95 	bl	8004c68 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003d3e:	e02a      	b.n	8003d96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003d40:	f001 fbd4 	bl	80054ec <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003d44:	e027      	b.n	8003d96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003d46:	f001 fbb3 	bl	80054b0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003d4a:	e024      	b.n	8003d96 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d4c:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <_HandleIncomingPacket+0xdc>)
 8003d4e:	7e1b      	ldrb	r3, [r3, #24]
 8003d50:	4618      	mov	r0, r3
 8003d52:	1cfb      	adds	r3, r7, #3
 8003d54:	2201      	movs	r2, #1
 8003d56:	4619      	mov	r1, r3
 8003d58:	f7ff fe02 	bl	8003960 <SEGGER_RTT_ReadNoLock>
 8003d5c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d015      	beq.n	8003d90 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f001 fb22 	bl	80053b0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003d6c:	e010      	b.n	8003d90 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	b25b      	sxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	da0e      	bge.n	8003d94 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003d76:	4b0a      	ldr	r3, [pc, #40]	; (8003da0 <_HandleIncomingPacket+0xdc>)
 8003d78:	7e1b      	ldrb	r3, [r3, #24]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	1cfb      	adds	r3, r7, #3
 8003d7e:	2201      	movs	r2, #1
 8003d80:	4619      	mov	r1, r3
 8003d82:	f7ff fded 	bl	8003960 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003d86:	e005      	b.n	8003d94 <_HandleIncomingPacket+0xd0>
    }
  }
 8003d88:	bf00      	nop
 8003d8a:	e004      	b.n	8003d96 <_HandleIncomingPacket+0xd2>
      break;
 8003d8c:	bf00      	nop
 8003d8e:	e002      	b.n	8003d96 <_HandleIncomingPacket+0xd2>
      break;
 8003d90:	bf00      	nop
 8003d92:	e000      	b.n	8003d96 <_HandleIncomingPacket+0xd2>
      break;
 8003d94:	bf00      	nop
}
 8003d96:	bf00      	nop
 8003d98:	3708      	adds	r7, #8
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	240062f0 	.word	0x240062f0

08003da4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b08c      	sub	sp, #48	; 0x30
 8003da8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003daa:	2301      	movs	r3, #1
 8003dac:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	3301      	adds	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003db8:	4b31      	ldr	r3, [pc, #196]	; (8003e80 <_TrySendOverflowPacket+0xdc>)
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dbe:	e00b      	b.n	8003dd8 <_TrySendOverflowPacket+0x34>
 8003dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc6:	1c59      	adds	r1, r3, #1
 8003dc8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003dca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	09db      	lsrs	r3, r3, #7
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dda:	2b7f      	cmp	r3, #127	; 0x7f
 8003ddc:	d8f0      	bhi.n	8003dc0 <_TrySendOverflowPacket+0x1c>
 8003dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de0:	1c5a      	adds	r2, r3, #1
 8003de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
 8003dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dec:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003dee:	4b25      	ldr	r3, [pc, #148]	; (8003e84 <_TrySendOverflowPacket+0xe0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003df4:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <_TrySendOverflowPacket+0xdc>)
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	623b      	str	r3, [r7, #32]
 8003e06:	e00b      	b.n	8003e20 <_TrySendOverflowPacket+0x7c>
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0e:	1c59      	adds	r1, r3, #1
 8003e10:	6279      	str	r1, [r7, #36]	; 0x24
 8003e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	09db      	lsrs	r3, r3, #7
 8003e1e:	623b      	str	r3, [r7, #32]
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	2b7f      	cmp	r3, #127	; 0x7f
 8003e24:	d8f0      	bhi.n	8003e08 <_TrySendOverflowPacket+0x64>
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	627a      	str	r2, [r7, #36]	; 0x24
 8003e2c:	6a3a      	ldr	r2, [r7, #32]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e34:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003e36:	4b12      	ldr	r3, [pc, #72]	; (8003e80 <_TrySendOverflowPacket+0xdc>)
 8003e38:	785b      	ldrb	r3, [r3, #1]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	1d3b      	adds	r3, r7, #4
 8003e3e:	69fa      	ldr	r2, [r7, #28]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	1d3b      	adds	r3, r7, #4
 8003e46:	4619      	mov	r1, r3
 8003e48:	f7fc fa4a 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003e56:	4a0a      	ldr	r2, [pc, #40]	; (8003e80 <_TrySendOverflowPacket+0xdc>)
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003e5c:	4b08      	ldr	r3, [pc, #32]	; (8003e80 <_TrySendOverflowPacket+0xdc>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <_TrySendOverflowPacket+0xdc>)
 8003e66:	701a      	strb	r2, [r3, #0]
 8003e68:	e004      	b.n	8003e74 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003e6a:	4b05      	ldr	r3, [pc, #20]	; (8003e80 <_TrySendOverflowPacket+0xdc>)
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	4a03      	ldr	r2, [pc, #12]	; (8003e80 <_TrySendOverflowPacket+0xdc>)
 8003e72:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003e74:	693b      	ldr	r3, [r7, #16]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3730      	adds	r7, #48	; 0x30
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	240062f0 	.word	0x240062f0
 8003e84:	e0001004 	.word	0xe0001004

08003e88 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003e94:	4b98      	ldr	r3, [pc, #608]	; (80040f8 <_SendPacket+0x270>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d010      	beq.n	8003ebe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003e9c:	4b96      	ldr	r3, [pc, #600]	; (80040f8 <_SendPacket+0x270>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 812d 	beq.w	8004100 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003ea6:	4b94      	ldr	r3, [pc, #592]	; (80040f8 <_SendPacket+0x270>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d109      	bne.n	8003ec2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003eae:	f7ff ff79 	bl	8003da4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003eb2:	4b91      	ldr	r3, [pc, #580]	; (80040f8 <_SendPacket+0x270>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	f040 8124 	bne.w	8004104 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8003ebc:	e001      	b.n	8003ec2 <_SendPacket+0x3a>
    goto Send;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <_SendPacket+0x3c>
Send:
 8003ec2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b1f      	cmp	r3, #31
 8003ec8:	d809      	bhi.n	8003ede <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003eca:	4b8b      	ldr	r3, [pc, #556]	; (80040f8 <_SendPacket+0x270>)
 8003ecc:	69da      	ldr	r2, [r3, #28]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f040 8115 	bne.w	8004108 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b17      	cmp	r3, #23
 8003ee2:	d807      	bhi.n	8003ef4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e0c4      	b.n	800407e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b7f      	cmp	r3, #127	; 0x7f
 8003f00:	d912      	bls.n	8003f28 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	09da      	lsrs	r2, r3, #7
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	3a01      	subs	r2, #1
 8003f1a:	60fa      	str	r2, [r7, #12]
 8003f1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	701a      	strb	r2, [r3, #0]
 8003f26:	e006      	b.n	8003f36 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2b7e      	cmp	r3, #126	; 0x7e
 8003f3a:	d807      	bhi.n	8003f4c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	701a      	strb	r2, [r3, #0]
 8003f4a:	e098      	b.n	800407e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f52:	d212      	bcs.n	8003f7a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	09da      	lsrs	r2, r3, #7
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	3a01      	subs	r2, #1
 8003f6c:	60fa      	str	r2, [r7, #12]
 8003f6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	701a      	strb	r2, [r3, #0]
 8003f78:	e081      	b.n	800407e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f80:	d21d      	bcs.n	8003fbe <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	0b9a      	lsrs	r2, r3, #14
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	b2d2      	uxtb	r2, r2
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	09db      	lsrs	r3, r3, #7
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	3a01      	subs	r2, #1
 8003f9c:	60fa      	str	r2, [r7, #12]
 8003f9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	3a01      	subs	r2, #1
 8003fb0:	60fa      	str	r2, [r7, #12]
 8003fb2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	701a      	strb	r2, [r3, #0]
 8003fbc:	e05f      	b.n	800407e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fc4:	d228      	bcs.n	8004018 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	0d5a      	lsrs	r2, r3, #21
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0b9b      	lsrs	r3, r3, #14
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	3a01      	subs	r2, #1
 8003fe0:	60fa      	str	r2, [r7, #12]
 8003fe2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	09db      	lsrs	r3, r3, #7
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	3a01      	subs	r2, #1
 8003ff6:	60fa      	str	r2, [r7, #12]
 8003ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	b2db      	uxtb	r3, r3
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	3a01      	subs	r2, #1
 800400a:	60fa      	str	r2, [r7, #12]
 800400c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004010:	b2da      	uxtb	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	701a      	strb	r2, [r3, #0]
 8004016:	e032      	b.n	800407e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	0f1a      	lsrs	r2, r3, #28
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3b01      	subs	r3, #1
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	0d5b      	lsrs	r3, r3, #21
 800402c:	b2db      	uxtb	r3, r3
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	3a01      	subs	r2, #1
 8004032:	60fa      	str	r2, [r7, #12]
 8004034:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	0b9b      	lsrs	r3, r3, #14
 8004042:	b2db      	uxtb	r3, r3
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	3a01      	subs	r2, #1
 8004048:	60fa      	str	r2, [r7, #12]
 800404a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800404e:	b2da      	uxtb	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	09db      	lsrs	r3, r3, #7
 8004058:	b2db      	uxtb	r3, r3
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	3a01      	subs	r2, #1
 800405e:	60fa      	str	r2, [r7, #12]
 8004060:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004064:	b2da      	uxtb	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	3a01      	subs	r2, #1
 8004072:	60fa      	str	r2, [r7, #12]
 8004074:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800407e:	4b1f      	ldr	r3, [pc, #124]	; (80040fc <_SendPacket+0x274>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004084:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <_SendPacket+0x270>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	69ba      	ldr	r2, [r7, #24]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	627b      	str	r3, [r7, #36]	; 0x24
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	623b      	str	r3, [r7, #32]
 8004096:	e00b      	b.n	80040b0 <_SendPacket+0x228>
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	b2da      	uxtb	r2, r3
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	1c59      	adds	r1, r3, #1
 80040a0:	6279      	str	r1, [r7, #36]	; 0x24
 80040a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	09db      	lsrs	r3, r3, #7
 80040ae:	623b      	str	r3, [r7, #32]
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	2b7f      	cmp	r3, #127	; 0x7f
 80040b4:	d8f0      	bhi.n	8004098 <_SendPacket+0x210>
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	627a      	str	r2, [r7, #36]	; 0x24
 80040bc:	6a3a      	ldr	r2, [r7, #32]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <_SendPacket+0x270>)
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	4618      	mov	r0, r3
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	461a      	mov	r2, r3
 80040d4:	68f9      	ldr	r1, [r7, #12]
 80040d6:	f7fc f903 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80040da:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d003      	beq.n	80040ea <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80040e2:	4a05      	ldr	r2, [pc, #20]	; (80040f8 <_SendPacket+0x270>)
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	60d3      	str	r3, [r2, #12]
 80040e8:	e00f      	b.n	800410a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80040ea:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <_SendPacket+0x270>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	3301      	adds	r3, #1
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4b01      	ldr	r3, [pc, #4]	; (80040f8 <_SendPacket+0x270>)
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	e008      	b.n	800410a <_SendPacket+0x282>
 80040f8:	240062f0 	.word	0x240062f0
 80040fc:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004100:	bf00      	nop
 8004102:	e002      	b.n	800410a <_SendPacket+0x282>
      goto SendDone;
 8004104:	bf00      	nop
 8004106:	e000      	b.n	800410a <_SendPacket+0x282>
      goto SendDone;
 8004108:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800410a:	4b14      	ldr	r3, [pc, #80]	; (800415c <_SendPacket+0x2d4>)
 800410c:	7e1b      	ldrb	r3, [r3, #24]
 800410e:	4619      	mov	r1, r3
 8004110:	4a13      	ldr	r2, [pc, #76]	; (8004160 <_SendPacket+0x2d8>)
 8004112:	460b      	mov	r3, r1
 8004114:	005b      	lsls	r3, r3, #1
 8004116:	440b      	add	r3, r1
 8004118:	00db      	lsls	r3, r3, #3
 800411a:	4413      	add	r3, r2
 800411c:	336c      	adds	r3, #108	; 0x6c
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	4b0e      	ldr	r3, [pc, #56]	; (800415c <_SendPacket+0x2d4>)
 8004122:	7e1b      	ldrb	r3, [r3, #24]
 8004124:	4618      	mov	r0, r3
 8004126:	490e      	ldr	r1, [pc, #56]	; (8004160 <_SendPacket+0x2d8>)
 8004128:	4603      	mov	r3, r0
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4403      	add	r3, r0
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	440b      	add	r3, r1
 8004132:	3370      	adds	r3, #112	; 0x70
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d00b      	beq.n	8004152 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800413a:	4b08      	ldr	r3, [pc, #32]	; (800415c <_SendPacket+0x2d4>)
 800413c:	789b      	ldrb	r3, [r3, #2]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d107      	bne.n	8004152 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004142:	4b06      	ldr	r3, [pc, #24]	; (800415c <_SendPacket+0x2d4>)
 8004144:	2201      	movs	r2, #1
 8004146:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004148:	f7ff fdbc 	bl	8003cc4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800414c:	4b03      	ldr	r3, [pc, #12]	; (800415c <_SendPacket+0x2d4>)
 800414e:	2200      	movs	r2, #0
 8004150:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004152:	bf00      	nop
 8004154:	3728      	adds	r7, #40	; 0x28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	240062f0 	.word	0x240062f0
 8004160:	24005230 	.word	0x24005230

08004164 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	3301      	adds	r3, #1
 800417a:	2b80      	cmp	r3, #128	; 0x80
 800417c:	d80a      	bhi.n	8004194 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	1c59      	adds	r1, r3, #1
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6051      	str	r1, [r2, #4]
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	2b80      	cmp	r3, #128	; 0x80
 800419a:	d15a      	bne.n	8004252 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	627b      	str	r3, [r7, #36]	; 0x24
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	623b      	str	r3, [r7, #32]
 80041bc:	e00b      	b.n	80041d6 <_StoreChar+0x72>
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	1c59      	adds	r1, r3, #1
 80041c6:	6279      	str	r1, [r7, #36]	; 0x24
 80041c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041cc:	b2d2      	uxtb	r2, r2
 80041ce:	701a      	strb	r2, [r3, #0]
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	09db      	lsrs	r3, r3, #7
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	2b7f      	cmp	r3, #127	; 0x7f
 80041da:	d8f0      	bhi.n	80041be <_StoreChar+0x5a>
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	627a      	str	r2, [r7, #36]	; 0x24
 80041e2:	6a3a      	ldr	r2, [r7, #32]
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	701a      	strb	r2, [r3, #0]
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	61fb      	str	r3, [r7, #28]
 80041f0:	2300      	movs	r3, #0
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	e00b      	b.n	800420e <_StoreChar+0xaa>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	1c59      	adds	r1, r3, #1
 80041fe:	61f9      	str	r1, [r7, #28]
 8004200:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	701a      	strb	r2, [r3, #0]
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	09db      	lsrs	r3, r3, #7
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b7f      	cmp	r3, #127	; 0x7f
 8004212:	d8f0      	bhi.n	80041f6 <_StoreChar+0x92>
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	61fa      	str	r2, [r7, #28]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	221a      	movs	r2, #26
 800422a:	6939      	ldr	r1, [r7, #16]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff fe2b 	bl	8003e88 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7ff fd38 	bl	8003cac <_PreparePacket>
 800423c:	4602      	mov	r2, r0
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	611a      	str	r2, [r3, #16]
  }
}
 8004252:	bf00      	nop
 8004254:	3728      	adds	r7, #40	; 0x28
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	; 0x28
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800426e:	2301      	movs	r3, #1
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004272:	2301      	movs	r3, #1
 8004274:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004276:	e007      	b.n	8004288 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004280:	623b      	str	r3, [r7, #32]
    Width++;
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	3301      	adds	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004288:	6a3a      	ldr	r2, [r7, #32]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d2f3      	bcs.n	8004278 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	429a      	cmp	r2, r3
 8004296:	d901      	bls.n	800429c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800429c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d11f      	bne.n	80042e6 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01c      	beq.n	80042e6 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80042ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d005      	beq.n	80042c2 <_PrintUnsigned+0x66>
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <_PrintUnsigned+0x66>
        c = '0';
 80042bc:	2330      	movs	r3, #48	; 0x30
 80042be:	76fb      	strb	r3, [r7, #27]
 80042c0:	e001      	b.n	80042c6 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80042c2:	2320      	movs	r3, #32
 80042c4:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80042c6:	e007      	b.n	80042d8 <_PrintUnsigned+0x7c>
        FieldWidth--;
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	3b01      	subs	r3, #1
 80042cc:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80042ce:	7efb      	ldrb	r3, [r7, #27]
 80042d0:	4619      	mov	r1, r3
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ff46 	bl	8004164 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80042d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <_PrintUnsigned+0x8a>
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d3f0      	bcc.n	80042c8 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d903      	bls.n	80042f4 <_PrintUnsigned+0x98>
      NumDigits--;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	e009      	b.n	8004308 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	429a      	cmp	r2, r3
 8004304:	d200      	bcs.n	8004308 <_PrintUnsigned+0xac>
        break;
 8004306:	e005      	b.n	8004314 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	fb02 f303 	mul.w	r3, r2, r3
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004312:	e7e8      	b.n	80042e6 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	fbb2 f3f3 	udiv	r3, r2, r3
 800431c:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800432c:	4a15      	ldr	r2, [pc, #84]	; (8004384 <_PrintUnsigned+0x128>)
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	4413      	add	r3, r2
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4619      	mov	r1, r3
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff ff14 	bl	8004164 <_StoreChar>
    Digit /= Base;
 800433c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e3      	bne.n	8004314 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800434c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	2b00      	cmp	r3, #0
 8004354:	d011      	beq.n	800437a <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8004356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00e      	beq.n	800437a <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800435c:	e006      	b.n	800436c <_PrintUnsigned+0x110>
        FieldWidth--;
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	3b01      	subs	r3, #1
 8004362:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8004364:	2120      	movs	r1, #32
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f7ff fefc 	bl	8004164 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	2b00      	cmp	r3, #0
 8004370:	d003      	beq.n	800437a <_PrintUnsigned+0x11e>
 8004372:	69fa      	ldr	r2, [r7, #28]
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	429a      	cmp	r2, r3
 8004378:	d3f1      	bcc.n	800435e <_PrintUnsigned+0x102>
      }
    }
  }
}
 800437a:	bf00      	nop
 800437c:	3728      	adds	r7, #40	; 0x28
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	08005824 	.word	0x08005824

08004388 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	bfb8      	it	lt
 800439c:	425b      	neglt	r3, r3
 800439e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80043a0:	2301      	movs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80043a4:	e007      	b.n	80043b6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80043ae:	613b      	str	r3, [r7, #16]
    Width++;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	3301      	adds	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	daf3      	bge.n	80043a6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d901      	bls.n	80043ca <_PrintInt+0x42>
    Width = NumDigits;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <_PrintInt+0x5e>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	db04      	blt.n	80043e0 <_PrintInt+0x58>
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <_PrintInt+0x5e>
    FieldWidth--;
 80043e0:	6a3b      	ldr	r3, [r7, #32]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	f003 0302 	and.w	r3, r3, #2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <_PrintInt+0x6e>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <_PrintInt+0x9c>
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d111      	bne.n	8004424 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00e      	beq.n	8004424 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004406:	e006      	b.n	8004416 <_PrintInt+0x8e>
        FieldWidth--;
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	3b01      	subs	r3, #1
 800440c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800440e:	2120      	movs	r1, #32
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f7ff fea7 	bl	8004164 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d003      	beq.n	8004424 <_PrintInt+0x9c>
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	429a      	cmp	r2, r3
 8004422:	d3f1      	bcc.n	8004408 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b00      	cmp	r3, #0
 8004428:	da07      	bge.n	800443a <_PrintInt+0xb2>
    v = -v;
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	425b      	negs	r3, r3
 800442e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004430:	212d      	movs	r1, #45	; 0x2d
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f7ff fe96 	bl	8004164 <_StoreChar>
 8004438:	e008      	b.n	800444c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004444:	212b      	movs	r1, #43	; 0x2b
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7ff fe8c 	bl	8004164 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800444c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d019      	beq.n	800448a <_PrintInt+0x102>
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d114      	bne.n	800448a <_PrintInt+0x102>
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d111      	bne.n	800448a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00e      	beq.n	800448a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800446c:	e006      	b.n	800447c <_PrintInt+0xf4>
        FieldWidth--;
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	3b01      	subs	r3, #1
 8004472:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004474:	2130      	movs	r1, #48	; 0x30
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f7ff fe74 	bl	8004164 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800447c:	6a3b      	ldr	r3, [r7, #32]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <_PrintInt+0x102>
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	429a      	cmp	r2, r3
 8004488:	d3f1      	bcc.n	800446e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800448a:	68b9      	ldr	r1, [r7, #8]
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	9301      	str	r3, [sp, #4]
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f7ff fedf 	bl	800425c <_PrintUnsigned>
}
 800449e:	bf00      	nop
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b098      	sub	sp, #96	; 0x60
 80044ac:	af02      	add	r7, sp, #8
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80044b4:	f3ef 8311 	mrs	r3, BASEPRI
 80044b8:	f04f 0120 	mov.w	r1, #32
 80044bc:	f381 8811 	msr	BASEPRI, r1
 80044c0:	633b      	str	r3, [r7, #48]	; 0x30
 80044c2:	48b7      	ldr	r0, [pc, #732]	; (80047a0 <_VPrintTarget+0x2f8>)
 80044c4:	f7ff fbf2 	bl	8003cac <_PreparePacket>
 80044c8:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80044ca:	4bb5      	ldr	r3, [pc, #724]	; (80047a0 <_VPrintTarget+0x2f8>)
 80044cc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80044ce:	2300      	movs	r3, #0
 80044d0:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	3301      	adds	r3, #1
 80044da:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3301      	adds	r3, #1
 80044ec:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80044ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 8183 	beq.w	80047fe <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80044f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80044fc:	2b25      	cmp	r3, #37	; 0x25
 80044fe:	f040 8170 	bne.w	80047e2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004502:	2300      	movs	r3, #0
 8004504:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8004506:	2301      	movs	r3, #1
 8004508:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8004512:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004516:	3b23      	subs	r3, #35	; 0x23
 8004518:	2b0d      	cmp	r3, #13
 800451a:	d83f      	bhi.n	800459c <_VPrintTarget+0xf4>
 800451c:	a201      	add	r2, pc, #4	; (adr r2, 8004524 <_VPrintTarget+0x7c>)
 800451e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004522:	bf00      	nop
 8004524:	0800458d 	.word	0x0800458d
 8004528:	0800459d 	.word	0x0800459d
 800452c:	0800459d 	.word	0x0800459d
 8004530:	0800459d 	.word	0x0800459d
 8004534:	0800459d 	.word	0x0800459d
 8004538:	0800459d 	.word	0x0800459d
 800453c:	0800459d 	.word	0x0800459d
 8004540:	0800459d 	.word	0x0800459d
 8004544:	0800457d 	.word	0x0800457d
 8004548:	0800459d 	.word	0x0800459d
 800454c:	0800455d 	.word	0x0800455d
 8004550:	0800459d 	.word	0x0800459d
 8004554:	0800459d 	.word	0x0800459d
 8004558:	0800456d 	.word	0x0800456d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800455c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	64bb      	str	r3, [r7, #72]	; 0x48
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	e01a      	b.n	80045a2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800456c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800456e:	f043 0302 	orr.w	r3, r3, #2
 8004572:	64bb      	str	r3, [r7, #72]	; 0x48
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3301      	adds	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e012      	b.n	80045a2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800457c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457e:	f043 0304 	orr.w	r3, r3, #4
 8004582:	64bb      	str	r3, [r7, #72]	; 0x48
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	3301      	adds	r3, #1
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e00a      	b.n	80045a2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800458c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458e:	f043 0308 	orr.w	r3, r3, #8
 8004592:	64bb      	str	r3, [r7, #72]	; 0x48
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3301      	adds	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	e002      	b.n	80045a2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800459c:	2300      	movs	r3, #0
 800459e:	653b      	str	r3, [r7, #80]	; 0x50
 80045a0:	bf00      	nop
        }
      } while (v);
 80045a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1b0      	bne.n	800450a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80045a8:	2300      	movs	r3, #0
 80045aa:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80045b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80045b8:	2b2f      	cmp	r3, #47	; 0x2f
 80045ba:	d912      	bls.n	80045e2 <_VPrintTarget+0x13a>
 80045bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80045c0:	2b39      	cmp	r3, #57	; 0x39
 80045c2:	d80e      	bhi.n	80045e2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80045ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	461a      	mov	r2, r3
 80045d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80045da:	4413      	add	r3, r2
 80045dc:	3b30      	subs	r3, #48	; 0x30
 80045de:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80045e0:	e7e4      	b.n	80045ac <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80045e2:	2300      	movs	r3, #0
 80045e4:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80045ee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80045f2:	2b2e      	cmp	r3, #46	; 0x2e
 80045f4:	d11d      	bne.n	8004632 <_VPrintTarget+0x18a>
        sFormat++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8004604:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004608:	2b2f      	cmp	r3, #47	; 0x2f
 800460a:	d912      	bls.n	8004632 <_VPrintTarget+0x18a>
 800460c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004610:	2b39      	cmp	r3, #57	; 0x39
 8004612:	d80e      	bhi.n	8004632 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3301      	adds	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800461a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	461a      	mov	r2, r3
 8004626:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800462a:	4413      	add	r3, r2
 800462c:	3b30      	subs	r3, #48	; 0x30
 800462e:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8004630:	e7e4      	b.n	80045fc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800463a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800463e:	2b6c      	cmp	r3, #108	; 0x6c
 8004640:	d003      	beq.n	800464a <_VPrintTarget+0x1a2>
 8004642:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004646:	2b68      	cmp	r3, #104	; 0x68
 8004648:	d107      	bne.n	800465a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3301      	adds	r3, #1
 8004656:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004658:	e7ef      	b.n	800463a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800465a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800465e:	2b25      	cmp	r3, #37	; 0x25
 8004660:	f000 80b3 	beq.w	80047ca <_VPrintTarget+0x322>
 8004664:	2b25      	cmp	r3, #37	; 0x25
 8004666:	f2c0 80b7 	blt.w	80047d8 <_VPrintTarget+0x330>
 800466a:	2b78      	cmp	r3, #120	; 0x78
 800466c:	f300 80b4 	bgt.w	80047d8 <_VPrintTarget+0x330>
 8004670:	2b58      	cmp	r3, #88	; 0x58
 8004672:	f2c0 80b1 	blt.w	80047d8 <_VPrintTarget+0x330>
 8004676:	3b58      	subs	r3, #88	; 0x58
 8004678:	2b20      	cmp	r3, #32
 800467a:	f200 80ad 	bhi.w	80047d8 <_VPrintTarget+0x330>
 800467e:	a201      	add	r2, pc, #4	; (adr r2, 8004684 <_VPrintTarget+0x1dc>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	0800477b 	.word	0x0800477b
 8004688:	080047d9 	.word	0x080047d9
 800468c:	080047d9 	.word	0x080047d9
 8004690:	080047d9 	.word	0x080047d9
 8004694:	080047d9 	.word	0x080047d9
 8004698:	080047d9 	.word	0x080047d9
 800469c:	080047d9 	.word	0x080047d9
 80046a0:	080047d9 	.word	0x080047d9
 80046a4:	080047d9 	.word	0x080047d9
 80046a8:	080047d9 	.word	0x080047d9
 80046ac:	080047d9 	.word	0x080047d9
 80046b0:	08004709 	.word	0x08004709
 80046b4:	0800472f 	.word	0x0800472f
 80046b8:	080047d9 	.word	0x080047d9
 80046bc:	080047d9 	.word	0x080047d9
 80046c0:	080047d9 	.word	0x080047d9
 80046c4:	080047d9 	.word	0x080047d9
 80046c8:	080047d9 	.word	0x080047d9
 80046cc:	080047d9 	.word	0x080047d9
 80046d0:	080047d9 	.word	0x080047d9
 80046d4:	080047d9 	.word	0x080047d9
 80046d8:	080047d9 	.word	0x080047d9
 80046dc:	080047d9 	.word	0x080047d9
 80046e0:	080047d9 	.word	0x080047d9
 80046e4:	080047a5 	.word	0x080047a5
 80046e8:	080047d9 	.word	0x080047d9
 80046ec:	080047d9 	.word	0x080047d9
 80046f0:	080047d9 	.word	0x080047d9
 80046f4:	080047d9 	.word	0x080047d9
 80046f8:	08004755 	.word	0x08004755
 80046fc:	080047d9 	.word	0x080047d9
 8004700:	080047d9 	.word	0x080047d9
 8004704:	0800477b 	.word	0x0800477b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	1d19      	adds	r1, r3, #4
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6011      	str	r1, [r2, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8004716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 800471c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004720:	f107 0314 	add.w	r3, r7, #20
 8004724:	4611      	mov	r1, r2
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fd1c 	bl	8004164 <_StoreChar>
        break;
 800472c:	e055      	b.n	80047da <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	1d19      	adds	r1, r3, #4
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6011      	str	r1, [r2, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800473c:	f107 0014 	add.w	r0, r7, #20
 8004740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004742:	9301      	str	r3, [sp, #4]
 8004744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004746:	9300      	str	r3, [sp, #0]
 8004748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800474a:	220a      	movs	r2, #10
 800474c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800474e:	f7ff fe1b 	bl	8004388 <_PrintInt>
        break;
 8004752:	e042      	b.n	80047da <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	1d19      	adds	r1, r3, #4
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6011      	str	r1, [r2, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004762:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004764:	f107 0014 	add.w	r0, r7, #20
 8004768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004772:	220a      	movs	r2, #10
 8004774:	f7ff fd72 	bl	800425c <_PrintUnsigned>
        break;
 8004778:	e02f      	b.n	80047da <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	1d19      	adds	r1, r3, #4
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6011      	str	r1, [r2, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004788:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800478a:	f107 0014 	add.w	r0, r7, #20
 800478e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004798:	2210      	movs	r2, #16
 800479a:	f7ff fd5f 	bl	800425c <_PrintUnsigned>
        break;
 800479e:	e01c      	b.n	80047da <_VPrintTarget+0x332>
 80047a0:	24006320 	.word	0x24006320
      case 'p':
        v = va_arg(*pParamList, int);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	1d19      	adds	r1, r3, #4
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	6011      	str	r1, [r2, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80047b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80047b4:	f107 0014 	add.w	r0, r7, #20
 80047b8:	2300      	movs	r3, #0
 80047ba:	9301      	str	r3, [sp, #4]
 80047bc:	2308      	movs	r3, #8
 80047be:	9300      	str	r3, [sp, #0]
 80047c0:	2308      	movs	r3, #8
 80047c2:	2210      	movs	r2, #16
 80047c4:	f7ff fd4a 	bl	800425c <_PrintUnsigned>
        break;
 80047c8:	e007      	b.n	80047da <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80047ca:	f107 0314 	add.w	r3, r7, #20
 80047ce:	2125      	movs	r1, #37	; 0x25
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff fcc7 	bl	8004164 <_StoreChar>
        break;
 80047d6:	e000      	b.n	80047da <_VPrintTarget+0x332>
      default:
        break;
 80047d8:	bf00      	nop
      }
      sFormat++;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3301      	adds	r3, #1
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e007      	b.n	80047f2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80047e2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80047e6:	f107 0314 	add.w	r3, r7, #20
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff fcb9 	bl	8004164 <_StoreChar>
    }
  } while (*sFormat);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f47f ae72 	bne.w	80044e0 <_VPrintTarget+0x38>
 80047fc:	e000      	b.n	8004800 <_VPrintTarget+0x358>
      break;
 80047fe:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	2b00      	cmp	r3, #0
 8004804:	d041      	beq.n	800488a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	643b      	str	r3, [r7, #64]	; 0x40
 8004812:	6a3b      	ldr	r3, [r7, #32]
 8004814:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004816:	e00b      	b.n	8004830 <_VPrintTarget+0x388>
 8004818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481a:	b2da      	uxtb	r2, r3
 800481c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800481e:	1c59      	adds	r1, r3, #1
 8004820:	6439      	str	r1, [r7, #64]	; 0x40
 8004822:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]
 800482a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482c:	09db      	lsrs	r3, r3, #7
 800482e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004832:	2b7f      	cmp	r3, #127	; 0x7f
 8004834:	d8f0      	bhi.n	8004818 <_VPrintTarget+0x370>
 8004836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	643a      	str	r2, [r7, #64]	; 0x40
 800483c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	701a      	strb	r2, [r3, #0]
 8004842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004844:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	63bb      	str	r3, [r7, #56]	; 0x38
 800484a:	2300      	movs	r3, #0
 800484c:	637b      	str	r3, [r7, #52]	; 0x34
 800484e:	e00b      	b.n	8004868 <_VPrintTarget+0x3c0>
 8004850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004852:	b2da      	uxtb	r2, r3
 8004854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004856:	1c59      	adds	r1, r3, #1
 8004858:	63b9      	str	r1, [r7, #56]	; 0x38
 800485a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800485e:	b2d2      	uxtb	r2, r2
 8004860:	701a      	strb	r2, [r3, #0]
 8004862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004864:	09db      	lsrs	r3, r3, #7
 8004866:	637b      	str	r3, [r7, #52]	; 0x34
 8004868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800486a:	2b7f      	cmp	r3, #127	; 0x7f
 800486c:	d8f0      	bhi.n	8004850 <_VPrintTarget+0x3a8>
 800486e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004870:	1c5a      	adds	r2, r3, #1
 8004872:	63ba      	str	r2, [r7, #56]	; 0x38
 8004874:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	701a      	strb	r2, [r3, #0]
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	69b9      	ldr	r1, [r7, #24]
 8004882:	221a      	movs	r2, #26
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff faff 	bl	8003e88 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004890:	bf00      	nop
 8004892:	3758      	adds	r7, #88	; 0x58
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}

08004898 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80048a6:	2300      	movs	r3, #0
 80048a8:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80048ac:	4917      	ldr	r1, [pc, #92]	; (800490c <SEGGER_SYSVIEW_Init+0x74>)
 80048ae:	4818      	ldr	r0, [pc, #96]	; (8004910 <SEGGER_SYSVIEW_Init+0x78>)
 80048b0:	f7ff f8dc 	bl	8003a6c <SEGGER_RTT_AllocUpBuffer>
 80048b4:	4603      	mov	r3, r0
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	4b16      	ldr	r3, [pc, #88]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 80048ba:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80048bc:	4b15      	ldr	r3, [pc, #84]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 80048be:	785a      	ldrb	r2, [r3, #1]
 80048c0:	4b14      	ldr	r3, [pc, #80]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 80048c2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80048c4:	4b13      	ldr	r3, [pc, #76]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 80048c6:	7e1b      	ldrb	r3, [r3, #24]
 80048c8:	4618      	mov	r0, r3
 80048ca:	2300      	movs	r3, #0
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	2308      	movs	r3, #8
 80048d0:	4a11      	ldr	r2, [pc, #68]	; (8004918 <SEGGER_SYSVIEW_Init+0x80>)
 80048d2:	490f      	ldr	r1, [pc, #60]	; (8004910 <SEGGER_SYSVIEW_Init+0x78>)
 80048d4:	f7ff f94e 	bl	8003b74 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80048d8:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 80048da:	2200      	movs	r2, #0
 80048dc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80048de:	4b0f      	ldr	r3, [pc, #60]	; (800491c <SEGGER_SYSVIEW_Init+0x84>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a0c      	ldr	r2, [pc, #48]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 80048e4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80048e6:	4a0b      	ldr	r2, [pc, #44]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80048ec:	4a09      	ldr	r2, [pc, #36]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80048f2:	4a08      	ldr	r2, [pc, #32]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80048f8:	4a06      	ldr	r2, [pc, #24]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <SEGGER_SYSVIEW_Init+0x7c>)
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	240056e8 	.word	0x240056e8
 8004910:	080057e4 	.word	0x080057e4
 8004914:	240062f0 	.word	0x240062f0
 8004918:	240062e8 	.word	0x240062e8
 800491c:	e0001004 	.word	0xe0001004

08004920 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004928:	4a04      	ldr	r2, [pc, #16]	; (800493c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6113      	str	r3, [r2, #16]
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	240062f0 	.word	0x240062f0

08004940 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004948:	f3ef 8311 	mrs	r3, BASEPRI
 800494c:	f04f 0120 	mov.w	r1, #32
 8004950:	f381 8811 	msr	BASEPRI, r1
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	4808      	ldr	r0, [pc, #32]	; (8004978 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004958:	f7ff f9a8 	bl	8003cac <_PreparePacket>
 800495c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	68b8      	ldr	r0, [r7, #8]
 8004964:	f7ff fa90 	bl	8003e88 <_SendPacket>
  RECORD_END();
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f383 8811 	msr	BASEPRI, r3
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	24006320 	.word	0x24006320

0800497c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004986:	f3ef 8311 	mrs	r3, BASEPRI
 800498a:	f04f 0120 	mov.w	r1, #32
 800498e:	f381 8811 	msr	BASEPRI, r1
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	4816      	ldr	r0, [pc, #88]	; (80049f0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004996:	f7ff f989 	bl	8003cac <_PreparePacket>
 800499a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	61bb      	str	r3, [r7, #24]
 80049a8:	e00b      	b.n	80049c2 <SEGGER_SYSVIEW_RecordU32+0x46>
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	1c59      	adds	r1, r3, #1
 80049b2:	61f9      	str	r1, [r7, #28]
 80049b4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	09db      	lsrs	r3, r3, #7
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2b7f      	cmp	r3, #127	; 0x7f
 80049c6:	d8f0      	bhi.n	80049aa <SEGGER_SYSVIEW_RecordU32+0x2e>
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	1c5a      	adds	r2, r3, #1
 80049cc:	61fa      	str	r2, [r7, #28]
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	6938      	ldr	r0, [r7, #16]
 80049de:	f7ff fa53 	bl	8003e88 <_SendPacket>
  RECORD_END();
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f383 8811 	msr	BASEPRI, r3
}
 80049e8:	bf00      	nop
 80049ea:	3720      	adds	r7, #32
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	24006320 	.word	0x24006320

080049f4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08c      	sub	sp, #48	; 0x30
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a00:	f3ef 8311 	mrs	r3, BASEPRI
 8004a04:	f04f 0120 	mov.w	r1, #32
 8004a08:	f381 8811 	msr	BASEPRI, r1
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	4825      	ldr	r0, [pc, #148]	; (8004aa4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004a10:	f7ff f94c 	bl	8003cac <_PreparePacket>
 8004a14:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a22:	e00b      	b.n	8004a3c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2a:	1c59      	adds	r1, r3, #1
 8004a2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a32:	b2d2      	uxtb	r2, r2
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	09db      	lsrs	r3, r3, #7
 8004a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	2b7f      	cmp	r3, #127	; 0x7f
 8004a40:	d8f0      	bhi.n	8004a24 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a4a:	b2d2      	uxtb	r2, r2
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	623b      	str	r3, [r7, #32]
 8004a5a:	e00b      	b.n	8004a74 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	1c59      	adds	r1, r3, #1
 8004a64:	6279      	str	r1, [r7, #36]	; 0x24
 8004a66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a6a:	b2d2      	uxtb	r2, r2
 8004a6c:	701a      	strb	r2, [r3, #0]
 8004a6e:	6a3b      	ldr	r3, [r7, #32]
 8004a70:	09db      	lsrs	r3, r3, #7
 8004a72:	623b      	str	r3, [r7, #32]
 8004a74:	6a3b      	ldr	r3, [r7, #32]
 8004a76:	2b7f      	cmp	r3, #127	; 0x7f
 8004a78:	d8f0      	bhi.n	8004a5c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	627a      	str	r2, [r7, #36]	; 0x24
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	6979      	ldr	r1, [r7, #20]
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f7ff f9fa 	bl	8003e88 <_SendPacket>
  RECORD_END();
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f383 8811 	msr	BASEPRI, r3
}
 8004a9a:	bf00      	nop
 8004a9c:	3730      	adds	r7, #48	; 0x30
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	24006320 	.word	0x24006320

08004aa8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b08c      	sub	sp, #48	; 0x30
 8004aac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004aae:	4b58      	ldr	r3, [pc, #352]	; (8004c10 <SEGGER_SYSVIEW_Start+0x168>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ab8:	f04f 0120 	mov.w	r1, #32
 8004abc:	f381 8811 	msr	BASEPRI, r1
 8004ac0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004ac2:	4b53      	ldr	r3, [pc, #332]	; (8004c10 <SEGGER_SYSVIEW_Start+0x168>)
 8004ac4:	785b      	ldrb	r3, [r3, #1]
 8004ac6:	220a      	movs	r2, #10
 8004ac8:	4952      	ldr	r1, [pc, #328]	; (8004c14 <SEGGER_SYSVIEW_Start+0x16c>)
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fb fc08 	bl	80002e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004ad6:	200a      	movs	r0, #10
 8004ad8:	f7ff ff32 	bl	8004940 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004adc:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae0:	f04f 0120 	mov.w	r1, #32
 8004ae4:	f381 8811 	msr	BASEPRI, r1
 8004ae8:	60bb      	str	r3, [r7, #8]
 8004aea:	484b      	ldr	r0, [pc, #300]	; (8004c18 <SEGGER_SYSVIEW_Start+0x170>)
 8004aec:	f7ff f8de 	bl	8003cac <_PreparePacket>
 8004af0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004afa:	4b45      	ldr	r3, [pc, #276]	; (8004c10 <SEGGER_SYSVIEW_Start+0x168>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b00:	e00b      	b.n	8004b1a <SEGGER_SYSVIEW_Start+0x72>
 8004b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	1c59      	adds	r1, r3, #1
 8004b0a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004b0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	09db      	lsrs	r3, r3, #7
 8004b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b1c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b1e:	d8f0      	bhi.n	8004b02 <SEGGER_SYSVIEW_Start+0x5a>
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	701a      	strb	r2, [r3, #0]
 8004b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
 8004b34:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <SEGGER_SYSVIEW_Start+0x168>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	623b      	str	r3, [r7, #32]
 8004b3a:	e00b      	b.n	8004b54 <SEGGER_SYSVIEW_Start+0xac>
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	1c59      	adds	r1, r3, #1
 8004b44:	6279      	str	r1, [r7, #36]	; 0x24
 8004b46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	09db      	lsrs	r3, r3, #7
 8004b52:	623b      	str	r3, [r7, #32]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	2b7f      	cmp	r3, #127	; 0x7f
 8004b58:	d8f0      	bhi.n	8004b3c <SEGGER_SYSVIEW_Start+0x94>
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	627a      	str	r2, [r7, #36]	; 0x24
 8004b60:	6a3a      	ldr	r2, [r7, #32]
 8004b62:	b2d2      	uxtb	r2, r2
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	61fb      	str	r3, [r7, #28]
 8004b6e:	4b28      	ldr	r3, [pc, #160]	; (8004c10 <SEGGER_SYSVIEW_Start+0x168>)
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	e00b      	b.n	8004b8e <SEGGER_SYSVIEW_Start+0xe6>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	1c59      	adds	r1, r3, #1
 8004b7e:	61f9      	str	r1, [r7, #28]
 8004b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	09db      	lsrs	r3, r3, #7
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b7f      	cmp	r3, #127	; 0x7f
 8004b92:	d8f0      	bhi.n	8004b76 <SEGGER_SYSVIEW_Start+0xce>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	61fa      	str	r2, [r7, #28]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	e00b      	b.n	8004bc6 <SEGGER_SYSVIEW_Start+0x11e>
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	1c59      	adds	r1, r3, #1
 8004bb6:	6179      	str	r1, [r7, #20]
 8004bb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004bbc:	b2d2      	uxtb	r2, r2
 8004bbe:	701a      	strb	r2, [r3, #0]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	09db      	lsrs	r3, r3, #7
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b7f      	cmp	r3, #127	; 0x7f
 8004bca:	d8f0      	bhi.n	8004bae <SEGGER_SYSVIEW_Start+0x106>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	617a      	str	r2, [r7, #20]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	b2d2      	uxtb	r2, r2
 8004bd6:	701a      	strb	r2, [r3, #0]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004bdc:	2218      	movs	r2, #24
 8004bde:	6839      	ldr	r1, [r7, #0]
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff f951 	bl	8003e88 <_SendPacket>
      RECORD_END();
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <SEGGER_SYSVIEW_Start+0x168>)
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <SEGGER_SYSVIEW_Start+0x168>)
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004bfa:	f000 f9eb 	bl	8004fd4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004bfe:	f000 f9b1 	bl	8004f64 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004c02:	f000 fc73 	bl	80054ec <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004c06:	bf00      	nop
 8004c08:	3730      	adds	r7, #48	; 0x30
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	240062f0 	.word	0x240062f0
 8004c14:	08005818 	.word	0x08005818
 8004c18:	24006320 	.word	0x24006320

08004c1c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c22:	f3ef 8311 	mrs	r3, BASEPRI
 8004c26:	f04f 0120 	mov.w	r1, #32
 8004c2a:	f381 8811 	msr	BASEPRI, r1
 8004c2e:	607b      	str	r3, [r7, #4]
 8004c30:	480b      	ldr	r0, [pc, #44]	; (8004c60 <SEGGER_SYSVIEW_Stop+0x44>)
 8004c32:	f7ff f83b 	bl	8003cac <_PreparePacket>
 8004c36:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <SEGGER_SYSVIEW_Stop+0x48>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d007      	beq.n	8004c50 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004c40:	220b      	movs	r2, #11
 8004c42:	6839      	ldr	r1, [r7, #0]
 8004c44:	6838      	ldr	r0, [r7, #0]
 8004c46:	f7ff f91f 	bl	8003e88 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004c4a:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <SEGGER_SYSVIEW_Stop+0x48>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f383 8811 	msr	BASEPRI, r3
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	24006320 	.word	0x24006320
 8004c64:	240062f0 	.word	0x240062f0

08004c68 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08c      	sub	sp, #48	; 0x30
 8004c6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004c6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004c72:	f04f 0120 	mov.w	r1, #32
 8004c76:	f381 8811 	msr	BASEPRI, r1
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	4845      	ldr	r0, [pc, #276]	; (8004d94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004c7e:	f7ff f815 	bl	8003cac <_PreparePacket>
 8004c82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c8c:	4b42      	ldr	r3, [pc, #264]	; (8004d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c92:	e00b      	b.n	8004cac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	1c59      	adds	r1, r3, #1
 8004c9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004c9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca8:	09db      	lsrs	r3, r3, #7
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	2b7f      	cmp	r3, #127	; 0x7f
 8004cb0:	d8f0      	bhi.n	8004c94 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cba:	b2d2      	uxtb	r2, r2
 8004cbc:	701a      	strb	r2, [r3, #0]
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cc6:	4b34      	ldr	r3, [pc, #208]	; (8004d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	623b      	str	r3, [r7, #32]
 8004ccc:	e00b      	b.n	8004ce6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	1c59      	adds	r1, r3, #1
 8004cd6:	6279      	str	r1, [r7, #36]	; 0x24
 8004cd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cdc:	b2d2      	uxtb	r2, r2
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	09db      	lsrs	r3, r3, #7
 8004ce4:	623b      	str	r3, [r7, #32]
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cea:	d8f0      	bhi.n	8004cce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	627a      	str	r2, [r7, #36]	; 0x24
 8004cf2:	6a3a      	ldr	r2, [r7, #32]
 8004cf4:	b2d2      	uxtb	r2, r2
 8004cf6:	701a      	strb	r2, [r3, #0]
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	61fb      	str	r3, [r7, #28]
 8004d00:	4b25      	ldr	r3, [pc, #148]	; (8004d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e00b      	b.n	8004d20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	1c59      	adds	r1, r3, #1
 8004d10:	61f9      	str	r1, [r7, #28]
 8004d12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d16:	b2d2      	uxtb	r2, r2
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	09db      	lsrs	r3, r3, #7
 8004d1e:	61bb      	str	r3, [r7, #24]
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	2b7f      	cmp	r3, #127	; 0x7f
 8004d24:	d8f0      	bhi.n	8004d08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	61fa      	str	r2, [r7, #28]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	617b      	str	r3, [r7, #20]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	e00b      	b.n	8004d58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	1c59      	adds	r1, r3, #1
 8004d48:	6179      	str	r1, [r7, #20]
 8004d4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	09db      	lsrs	r3, r3, #7
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8004d5c:	d8f0      	bhi.n	8004d40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	617a      	str	r2, [r7, #20]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	b2d2      	uxtb	r2, r2
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004d6e:	2218      	movs	r2, #24
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	68b8      	ldr	r0, [r7, #8]
 8004d74:	f7ff f888 	bl	8003e88 <_SendPacket>
  RECORD_END();
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004d7e:	4b06      	ldr	r3, [pc, #24]	; (8004d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d002      	beq.n	8004d8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004d86:	4b04      	ldr	r3, [pc, #16]	; (8004d98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	4798      	blx	r3
  }
}
 8004d8c:	bf00      	nop
 8004d8e:	3730      	adds	r7, #48	; 0x30
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	24006320 	.word	0x24006320
 8004d98:	240062f0 	.word	0x240062f0

08004d9c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b092      	sub	sp, #72	; 0x48
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004da4:	f3ef 8311 	mrs	r3, BASEPRI
 8004da8:	f04f 0120 	mov.w	r1, #32
 8004dac:	f381 8811 	msr	BASEPRI, r1
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	486a      	ldr	r0, [pc, #424]	; (8004f5c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004db4:	f7fe ff7a 	bl	8003cac <_PreparePacket>
 8004db8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b66      	ldr	r3, [pc, #408]	; (8004f60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	643b      	str	r3, [r7, #64]	; 0x40
 8004dce:	e00b      	b.n	8004de8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dd6:	1c59      	adds	r1, r3, #1
 8004dd8:	6479      	str	r1, [r7, #68]	; 0x44
 8004dda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de4:	09db      	lsrs	r3, r3, #7
 8004de6:	643b      	str	r3, [r7, #64]	; 0x40
 8004de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dea:	2b7f      	cmp	r3, #127	; 0x7f
 8004dec:	d8f0      	bhi.n	8004dd0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	647a      	str	r2, [r7, #68]	; 0x44
 8004df4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004df6:	b2d2      	uxtb	r2, r2
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e08:	e00b      	b.n	8004e22 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e10:	1c59      	adds	r1, r3, #1
 8004e12:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004e14:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]
 8004e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e1e:	09db      	lsrs	r3, r3, #7
 8004e20:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e24:	2b7f      	cmp	r3, #127	; 0x7f
 8004e26:	d8f0      	bhi.n	8004e0a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004e2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e30:	b2d2      	uxtb	r2, r2
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e36:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	4619      	mov	r1, r3
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7fe fee3 	bl	8003c0c <_EncodeStr>
 8004e46:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004e48:	2209      	movs	r2, #9
 8004e4a:	68f9      	ldr	r1, [r7, #12]
 8004e4c:	6938      	ldr	r0, [r7, #16]
 8004e4e:	f7ff f81b 	bl	8003e88 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b40      	ldr	r3, [pc, #256]	; (8004f60 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	633b      	str	r3, [r7, #48]	; 0x30
 8004e66:	e00b      	b.n	8004e80 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e6e:	1c59      	adds	r1, r3, #1
 8004e70:	6379      	str	r1, [r7, #52]	; 0x34
 8004e72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	09db      	lsrs	r3, r3, #7
 8004e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	2b7f      	cmp	r3, #127	; 0x7f
 8004e84:	d8f0      	bhi.n	8004e68 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	637a      	str	r2, [r7, #52]	; 0x34
 8004e8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ea0:	e00b      	b.n	8004eba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea8:	1c59      	adds	r1, r3, #1
 8004eaa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004eac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb6:	09db      	lsrs	r3, r3, #7
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ebe:	d8f0      	bhi.n	8004ea2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ec8:	b2d2      	uxtb	r2, r2
 8004eca:	701a      	strb	r2, [r3, #0]
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	623b      	str	r3, [r7, #32]
 8004eda:	e00b      	b.n	8004ef4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	1c59      	adds	r1, r3, #1
 8004ee4:	6279      	str	r1, [r7, #36]	; 0x24
 8004ee6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	09db      	lsrs	r3, r3, #7
 8004ef2:	623b      	str	r3, [r7, #32]
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	2b7f      	cmp	r3, #127	; 0x7f
 8004ef8:	d8f0      	bhi.n	8004edc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	627a      	str	r2, [r7, #36]	; 0x24
 8004f00:	6a3a      	ldr	r2, [r7, #32]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	61fb      	str	r3, [r7, #28]
 8004f0e:	2300      	movs	r3, #0
 8004f10:	61bb      	str	r3, [r7, #24]
 8004f12:	e00b      	b.n	8004f2c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	1c59      	adds	r1, r3, #1
 8004f1c:	61f9      	str	r1, [r7, #28]
 8004f1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	09db      	lsrs	r3, r3, #7
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004f30:	d8f0      	bhi.n	8004f14 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	1c5a      	adds	r2, r3, #1
 8004f36:	61fa      	str	r2, [r7, #28]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004f42:	2215      	movs	r2, #21
 8004f44:	68f9      	ldr	r1, [r7, #12]
 8004f46:	6938      	ldr	r0, [r7, #16]
 8004f48:	f7fe ff9e 	bl	8003e88 <_SendPacket>
  RECORD_END();
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f383 8811 	msr	BASEPRI, r3
}
 8004f52:	bf00      	nop
 8004f54:	3748      	adds	r7, #72	; 0x48
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	24006320 	.word	0x24006320
 8004f60:	240062f0 	.word	0x240062f0

08004f64 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f72:	6a1b      	ldr	r3, [r3, #32]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d003      	beq.n	8004f82 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004f7a:	4b03      	ldr	r3, [pc, #12]	; (8004f88 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	4798      	blx	r3
  }
}
 8004f82:	bf00      	nop
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	240062f0 	.word	0x240062f0

08004f8c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004f94:	f3ef 8311 	mrs	r3, BASEPRI
 8004f98:	f04f 0120 	mov.w	r1, #32
 8004f9c:	f381 8811 	msr	BASEPRI, r1
 8004fa0:	617b      	str	r3, [r7, #20]
 8004fa2:	480b      	ldr	r0, [pc, #44]	; (8004fd0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004fa4:	f7fe fe82 	bl	8003cac <_PreparePacket>
 8004fa8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004faa:	2280      	movs	r2, #128	; 0x80
 8004fac:	6879      	ldr	r1, [r7, #4]
 8004fae:	6938      	ldr	r0, [r7, #16]
 8004fb0:	f7fe fe2c 	bl	8003c0c <_EncodeStr>
 8004fb4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004fb6:	220e      	movs	r2, #14
 8004fb8:	68f9      	ldr	r1, [r7, #12]
 8004fba:	6938      	ldr	r0, [r7, #16]
 8004fbc:	f7fe ff64 	bl	8003e88 <_SendPacket>
  RECORD_END();
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f383 8811 	msr	BASEPRI, r3
}
 8004fc6:	bf00      	nop
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	24006320 	.word	0x24006320

08004fd4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004fd4:	b590      	push	{r4, r7, lr}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004fda:	4b15      	ldr	r3, [pc, #84]	; (8005030 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d01a      	beq.n	8005018 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004fe2:	4b13      	ldr	r3, [pc, #76]	; (8005030 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d015      	beq.n	8005018 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4798      	blx	r3
 8004ff4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004ff8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004ffa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	000a      	movs	r2, r1
 8005008:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800500a:	4613      	mov	r3, r2
 800500c:	461a      	mov	r2, r3
 800500e:	4621      	mov	r1, r4
 8005010:	200d      	movs	r0, #13
 8005012:	f7ff fcef 	bl	80049f4 <SEGGER_SYSVIEW_RecordU32x2>
 8005016:	e006      	b.n	8005026 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005018:	4b06      	ldr	r3, [pc, #24]	; (8005034 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4619      	mov	r1, r3
 800501e:	200c      	movs	r0, #12
 8005020:	f7ff fcac 	bl	800497c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bd90      	pop	{r4, r7, pc}
 800502e:	bf00      	nop
 8005030:	240062f0 	.word	0x240062f0
 8005034:	e0001004 	.word	0xe0001004

08005038 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800503e:	f3ef 8311 	mrs	r3, BASEPRI
 8005042:	f04f 0120 	mov.w	r1, #32
 8005046:	f381 8811 	msr	BASEPRI, r1
 800504a:	60fb      	str	r3, [r7, #12]
 800504c:	4819      	ldr	r0, [pc, #100]	; (80050b4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800504e:	f7fe fe2d 	bl	8003cac <_PreparePacket>
 8005052:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005058:	4b17      	ldr	r3, [pc, #92]	; (80050b8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005060:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	e00b      	b.n	8005084 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	b2da      	uxtb	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1c59      	adds	r1, r3, #1
 8005074:	6179      	str	r1, [r7, #20]
 8005076:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	701a      	strb	r2, [r3, #0]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	09db      	lsrs	r3, r3, #7
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	2b7f      	cmp	r3, #127	; 0x7f
 8005088:	d8f0      	bhi.n	800506c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	1c5a      	adds	r2, r3, #1
 800508e:	617a      	str	r2, [r7, #20]
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800509a:	2202      	movs	r2, #2
 800509c:	6879      	ldr	r1, [r7, #4]
 800509e:	68b8      	ldr	r0, [r7, #8]
 80050a0:	f7fe fef2 	bl	8003e88 <_SendPacket>
  RECORD_END();
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f383 8811 	msr	BASEPRI, r3
}
 80050aa:	bf00      	nop
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	24006320 	.word	0x24006320
 80050b8:	e000ed04 	.word	0xe000ed04

080050bc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050c2:	f3ef 8311 	mrs	r3, BASEPRI
 80050c6:	f04f 0120 	mov.w	r1, #32
 80050ca:	f381 8811 	msr	BASEPRI, r1
 80050ce:	607b      	str	r3, [r7, #4]
 80050d0:	4807      	ldr	r0, [pc, #28]	; (80050f0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80050d2:	f7fe fdeb 	bl	8003cac <_PreparePacket>
 80050d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80050d8:	2203      	movs	r2, #3
 80050da:	6839      	ldr	r1, [r7, #0]
 80050dc:	6838      	ldr	r0, [r7, #0]
 80050de:	f7fe fed3 	bl	8003e88 <_SendPacket>
  RECORD_END();
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f383 8811 	msr	BASEPRI, r3
}
 80050e8:	bf00      	nop
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	24006320 	.word	0x24006320

080050f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050fa:	f3ef 8311 	mrs	r3, BASEPRI
 80050fe:	f04f 0120 	mov.w	r1, #32
 8005102:	f381 8811 	msr	BASEPRI, r1
 8005106:	607b      	str	r3, [r7, #4]
 8005108:	4807      	ldr	r0, [pc, #28]	; (8005128 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800510a:	f7fe fdcf 	bl	8003cac <_PreparePacket>
 800510e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005110:	2212      	movs	r2, #18
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	6838      	ldr	r0, [r7, #0]
 8005116:	f7fe feb7 	bl	8003e88 <_SendPacket>
  RECORD_END();
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f383 8811 	msr	BASEPRI, r3
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	24006320 	.word	0x24006320

0800512c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005132:	f3ef 8311 	mrs	r3, BASEPRI
 8005136:	f04f 0120 	mov.w	r1, #32
 800513a:	f381 8811 	msr	BASEPRI, r1
 800513e:	607b      	str	r3, [r7, #4]
 8005140:	4807      	ldr	r0, [pc, #28]	; (8005160 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005142:	f7fe fdb3 	bl	8003cac <_PreparePacket>
 8005146:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005148:	2211      	movs	r2, #17
 800514a:	6839      	ldr	r1, [r7, #0]
 800514c:	6838      	ldr	r0, [r7, #0]
 800514e:	f7fe fe9b 	bl	8003e88 <_SendPacket>
  RECORD_END();
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f383 8811 	msr	BASEPRI, r3
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	24006320 	.word	0x24006320

08005164 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800516c:	f3ef 8311 	mrs	r3, BASEPRI
 8005170:	f04f 0120 	mov.w	r1, #32
 8005174:	f381 8811 	msr	BASEPRI, r1
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	4819      	ldr	r0, [pc, #100]	; (80051e0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800517c:	f7fe fd96 	bl	8003cac <_PreparePacket>
 8005180:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005186:	4b17      	ldr	r3, [pc, #92]	; (80051e4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	61fb      	str	r3, [r7, #28]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	61bb      	str	r3, [r7, #24]
 8005198:	e00b      	b.n	80051b2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	b2da      	uxtb	r2, r3
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	1c59      	adds	r1, r3, #1
 80051a2:	61f9      	str	r1, [r7, #28]
 80051a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	701a      	strb	r2, [r3, #0]
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	09db      	lsrs	r3, r3, #7
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	2b7f      	cmp	r3, #127	; 0x7f
 80051b6:	d8f0      	bhi.n	800519a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	1c5a      	adds	r2, r3, #1
 80051bc:	61fa      	str	r2, [r7, #28]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80051c8:	2208      	movs	r2, #8
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	6938      	ldr	r0, [r7, #16]
 80051ce:	f7fe fe5b 	bl	8003e88 <_SendPacket>
  RECORD_END();
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	f383 8811 	msr	BASEPRI, r3
}
 80051d8:	bf00      	nop
 80051da:	3720      	adds	r7, #32
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	24006320 	.word	0x24006320
 80051e4:	240062f0 	.word	0x240062f0

080051e8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051f0:	f3ef 8311 	mrs	r3, BASEPRI
 80051f4:	f04f 0120 	mov.w	r1, #32
 80051f8:	f381 8811 	msr	BASEPRI, r1
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	4819      	ldr	r0, [pc, #100]	; (8005264 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005200:	f7fe fd54 	bl	8003cac <_PreparePacket>
 8005204:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800520a:	4b17      	ldr	r3, [pc, #92]	; (8005268 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	61bb      	str	r3, [r7, #24]
 800521c:	e00b      	b.n	8005236 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	1c59      	adds	r1, r3, #1
 8005226:	61f9      	str	r1, [r7, #28]
 8005228:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	09db      	lsrs	r3, r3, #7
 8005234:	61bb      	str	r3, [r7, #24]
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	2b7f      	cmp	r3, #127	; 0x7f
 800523a:	d8f0      	bhi.n	800521e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	61fa      	str	r2, [r7, #28]
 8005242:	69ba      	ldr	r2, [r7, #24]
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800524c:	2204      	movs	r2, #4
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	6938      	ldr	r0, [r7, #16]
 8005252:	f7fe fe19 	bl	8003e88 <_SendPacket>
  RECORD_END();
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f383 8811 	msr	BASEPRI, r3
}
 800525c:	bf00      	nop
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	24006320 	.word	0x24006320
 8005268:	240062f0 	.word	0x240062f0

0800526c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005274:	f3ef 8311 	mrs	r3, BASEPRI
 8005278:	f04f 0120 	mov.w	r1, #32
 800527c:	f381 8811 	msr	BASEPRI, r1
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	4819      	ldr	r0, [pc, #100]	; (80052e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005284:	f7fe fd12 	bl	8003cac <_PreparePacket>
 8005288:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800528e:	4b17      	ldr	r3, [pc, #92]	; (80052ec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	61fb      	str	r3, [r7, #28]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	61bb      	str	r3, [r7, #24]
 80052a0:	e00b      	b.n	80052ba <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	b2da      	uxtb	r2, r3
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	1c59      	adds	r1, r3, #1
 80052aa:	61f9      	str	r1, [r7, #28]
 80052ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052b0:	b2d2      	uxtb	r2, r2
 80052b2:	701a      	strb	r2, [r3, #0]
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	09db      	lsrs	r3, r3, #7
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b7f      	cmp	r3, #127	; 0x7f
 80052be:	d8f0      	bhi.n	80052a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	61fa      	str	r2, [r7, #28]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	b2d2      	uxtb	r2, r2
 80052ca:	701a      	strb	r2, [r3, #0]
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80052d0:	2206      	movs	r2, #6
 80052d2:	68f9      	ldr	r1, [r7, #12]
 80052d4:	6938      	ldr	r0, [r7, #16]
 80052d6:	f7fe fdd7 	bl	8003e88 <_SendPacket>
  RECORD_END();
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f383 8811 	msr	BASEPRI, r3
}
 80052e0:	bf00      	nop
 80052e2:	3720      	adds	r7, #32
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	24006320 	.word	0x24006320
 80052ec:	240062f0 	.word	0x240062f0

080052f0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	; 0x28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80052fa:	f3ef 8311 	mrs	r3, BASEPRI
 80052fe:	f04f 0120 	mov.w	r1, #32
 8005302:	f381 8811 	msr	BASEPRI, r1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	4827      	ldr	r0, [pc, #156]	; (80053a8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800530a:	f7fe fccf 	bl	8003cac <_PreparePacket>
 800530e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005314:	4b25      	ldr	r3, [pc, #148]	; (80053ac <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	623b      	str	r3, [r7, #32]
 8005326:	e00b      	b.n	8005340 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	b2da      	uxtb	r2, r3
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	1c59      	adds	r1, r3, #1
 8005330:	6279      	str	r1, [r7, #36]	; 0x24
 8005332:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	701a      	strb	r2, [r3, #0]
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	09db      	lsrs	r3, r3, #7
 800533e:	623b      	str	r3, [r7, #32]
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	2b7f      	cmp	r3, #127	; 0x7f
 8005344:	d8f0      	bhi.n	8005328 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	627a      	str	r2, [r7, #36]	; 0x24
 800534c:	6a3a      	ldr	r2, [r7, #32]
 800534e:	b2d2      	uxtb	r2, r2
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	61bb      	str	r3, [r7, #24]
 800535e:	e00b      	b.n	8005378 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	b2da      	uxtb	r2, r3
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	1c59      	adds	r1, r3, #1
 8005368:	61f9      	str	r1, [r7, #28]
 800536a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800536e:	b2d2      	uxtb	r2, r2
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	09db      	lsrs	r3, r3, #7
 8005376:	61bb      	str	r3, [r7, #24]
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	2b7f      	cmp	r3, #127	; 0x7f
 800537c:	d8f0      	bhi.n	8005360 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	61fa      	str	r2, [r7, #28]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800538e:	2207      	movs	r2, #7
 8005390:	68f9      	ldr	r1, [r7, #12]
 8005392:	6938      	ldr	r0, [r7, #16]
 8005394:	f7fe fd78 	bl	8003e88 <_SendPacket>
  RECORD_END();
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f383 8811 	msr	BASEPRI, r3
}
 800539e:	bf00      	nop
 80053a0:	3728      	adds	r7, #40	; 0x28
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	24006320 	.word	0x24006320
 80053ac:	240062f0 	.word	0x240062f0

080053b0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b08c      	sub	sp, #48	; 0x30
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80053ba:	4b3b      	ldr	r3, [pc, #236]	; (80054a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d06d      	beq.n	800549e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80053c2:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80053c8:	2300      	movs	r3, #0
 80053ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80053cc:	e008      	b.n	80053e0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80053d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d007      	beq.n	80053ea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80053da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053dc:	3301      	adds	r3, #1
 80053de:	62bb      	str	r3, [r7, #40]	; 0x28
 80053e0:	79fb      	ldrb	r3, [r7, #7]
 80053e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d3f2      	bcc.n	80053ce <SEGGER_SYSVIEW_SendModule+0x1e>
 80053e8:	e000      	b.n	80053ec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80053ea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80053ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d055      	beq.n	800549e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053f2:	f3ef 8311 	mrs	r3, BASEPRI
 80053f6:	f04f 0120 	mov.w	r1, #32
 80053fa:	f381 8811 	msr	BASEPRI, r1
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	482a      	ldr	r0, [pc, #168]	; (80054ac <SEGGER_SYSVIEW_SendModule+0xfc>)
 8005402:	f7fe fc53 	bl	8003cac <_PreparePacket>
 8005406:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	623b      	str	r3, [r7, #32]
 8005414:	e00b      	b.n	800542e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	b2da      	uxtb	r2, r3
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	1c59      	adds	r1, r3, #1
 800541e:	6279      	str	r1, [r7, #36]	; 0x24
 8005420:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	09db      	lsrs	r3, r3, #7
 800542c:	623b      	str	r3, [r7, #32]
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	2b7f      	cmp	r3, #127	; 0x7f
 8005432:	d8f0      	bhi.n	8005416 <SEGGER_SYSVIEW_SendModule+0x66>
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	627a      	str	r2, [r7, #36]	; 0x24
 800543a:	6a3a      	ldr	r2, [r7, #32]
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	701a      	strb	r2, [r3, #0]
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	61fb      	str	r3, [r7, #28]
 8005448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e00b      	b.n	8005468 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	1c59      	adds	r1, r3, #1
 8005458:	61f9      	str	r1, [r7, #28]
 800545a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	09db      	lsrs	r3, r3, #7
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	2b7f      	cmp	r3, #127	; 0x7f
 800546c:	d8f0      	bhi.n	8005450 <SEGGER_SYSVIEW_SendModule+0xa0>
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	1c5a      	adds	r2, r3, #1
 8005472:	61fa      	str	r2, [r7, #28]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2280      	movs	r2, #128	; 0x80
 8005484:	4619      	mov	r1, r3
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f7fe fbc0 	bl	8003c0c <_EncodeStr>
 800548c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800548e:	2216      	movs	r2, #22
 8005490:	68f9      	ldr	r1, [r7, #12]
 8005492:	6938      	ldr	r0, [r7, #16]
 8005494:	f7fe fcf8 	bl	8003e88 <_SendPacket>
      RECORD_END();
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800549e:	bf00      	nop
 80054a0:	3730      	adds	r7, #48	; 0x30
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	24006318 	.word	0x24006318
 80054ac:	24006320 	.word	0x24006320

080054b0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80054b6:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00f      	beq.n	80054de <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80054be:	4b0a      	ldr	r3, [pc, #40]	; (80054e8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d002      	beq.n	80054d2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1f2      	bne.n	80054c4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	24006318 	.word	0x24006318

080054ec <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80054f2:	f3ef 8311 	mrs	r3, BASEPRI
 80054f6:	f04f 0120 	mov.w	r1, #32
 80054fa:	f381 8811 	msr	BASEPRI, r1
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	4817      	ldr	r0, [pc, #92]	; (8005560 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005502:	f7fe fbd3 	bl	8003cac <_PreparePacket>
 8005506:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	617b      	str	r3, [r7, #20]
 8005510:	4b14      	ldr	r3, [pc, #80]	; (8005564 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	e00b      	b.n	8005530 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	b2da      	uxtb	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	1c59      	adds	r1, r3, #1
 8005520:	6179      	str	r1, [r7, #20]
 8005522:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	09db      	lsrs	r3, r3, #7
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2b7f      	cmp	r3, #127	; 0x7f
 8005534:	d8f0      	bhi.n	8005518 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	617a      	str	r2, [r7, #20]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	b2d2      	uxtb	r2, r2
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005546:	221b      	movs	r2, #27
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	68b8      	ldr	r0, [r7, #8]
 800554c:	f7fe fc9c 	bl	8003e88 <_SendPacket>
  RECORD_END();
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f383 8811 	msr	BASEPRI, r3
}
 8005556:	bf00      	nop
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	24006320 	.word	0x24006320
 8005564:	2400631c 	.word	0x2400631c

08005568 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005568:	b40f      	push	{r0, r1, r2, r3}
 800556a:	b580      	push	{r7, lr}
 800556c:	b082      	sub	sp, #8
 800556e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005570:	f107 0314 	add.w	r3, r7, #20
 8005574:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	461a      	mov	r2, r3
 800557a:	2100      	movs	r1, #0
 800557c:	6938      	ldr	r0, [r7, #16]
 800557e:	f7fe ff93 	bl	80044a8 <_VPrintTarget>
  va_end(ParamList);
}
 8005582:	bf00      	nop
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800558c:	b004      	add	sp, #16
 800558e:	4770      	bx	lr

08005590 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b08a      	sub	sp, #40	; 0x28
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005598:	f3ef 8311 	mrs	r3, BASEPRI
 800559c:	f04f 0120 	mov.w	r1, #32
 80055a0:	f381 8811 	msr	BASEPRI, r1
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	4827      	ldr	r0, [pc, #156]	; (8005644 <SEGGER_SYSVIEW_Warn+0xb4>)
 80055a8:	f7fe fb80 	bl	8003cac <_PreparePacket>
 80055ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80055ae:	2280      	movs	r2, #128	; 0x80
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	6938      	ldr	r0, [r7, #16]
 80055b4:	f7fe fb2a 	bl	8003c0c <_EncodeStr>
 80055b8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
 80055be:	2301      	movs	r3, #1
 80055c0:	623b      	str	r3, [r7, #32]
 80055c2:	e00b      	b.n	80055dc <SEGGER_SYSVIEW_Warn+0x4c>
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1c59      	adds	r1, r3, #1
 80055cc:	6279      	str	r1, [r7, #36]	; 0x24
 80055ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	09db      	lsrs	r3, r3, #7
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b7f      	cmp	r3, #127	; 0x7f
 80055e0:	d8f0      	bhi.n	80055c4 <SEGGER_SYSVIEW_Warn+0x34>
 80055e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	627a      	str	r2, [r7, #36]	; 0x24
 80055e8:	6a3a      	ldr	r2, [r7, #32]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	2300      	movs	r3, #0
 80055f8:	61bb      	str	r3, [r7, #24]
 80055fa:	e00b      	b.n	8005614 <SEGGER_SYSVIEW_Warn+0x84>
 80055fc:	69bb      	ldr	r3, [r7, #24]
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	1c59      	adds	r1, r3, #1
 8005604:	61f9      	str	r1, [r7, #28]
 8005606:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	09db      	lsrs	r3, r3, #7
 8005612:	61bb      	str	r3, [r7, #24]
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	2b7f      	cmp	r3, #127	; 0x7f
 8005618:	d8f0      	bhi.n	80055fc <SEGGER_SYSVIEW_Warn+0x6c>
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	61fa      	str	r2, [r7, #28]
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800562a:	221a      	movs	r2, #26
 800562c:	68f9      	ldr	r1, [r7, #12]
 800562e:	6938      	ldr	r0, [r7, #16]
 8005630:	f7fe fc2a 	bl	8003e88 <_SendPacket>
  RECORD_END();
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f383 8811 	msr	BASEPRI, r3
}
 800563a:	bf00      	nop
 800563c:	3728      	adds	r7, #40	; 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	24006320 	.word	0x24006320

08005648 <__libc_init_array>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	4d0d      	ldr	r5, [pc, #52]	; (8005680 <__libc_init_array+0x38>)
 800564c:	4c0d      	ldr	r4, [pc, #52]	; (8005684 <__libc_init_array+0x3c>)
 800564e:	1b64      	subs	r4, r4, r5
 8005650:	10a4      	asrs	r4, r4, #2
 8005652:	2600      	movs	r6, #0
 8005654:	42a6      	cmp	r6, r4
 8005656:	d109      	bne.n	800566c <__libc_init_array+0x24>
 8005658:	4d0b      	ldr	r5, [pc, #44]	; (8005688 <__libc_init_array+0x40>)
 800565a:	4c0c      	ldr	r4, [pc, #48]	; (800568c <__libc_init_array+0x44>)
 800565c:	f000 f83e 	bl	80056dc <_init>
 8005660:	1b64      	subs	r4, r4, r5
 8005662:	10a4      	asrs	r4, r4, #2
 8005664:	2600      	movs	r6, #0
 8005666:	42a6      	cmp	r6, r4
 8005668:	d105      	bne.n	8005676 <__libc_init_array+0x2e>
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005670:	4798      	blx	r3
 8005672:	3601      	adds	r6, #1
 8005674:	e7ee      	b.n	8005654 <__libc_init_array+0xc>
 8005676:	f855 3b04 	ldr.w	r3, [r5], #4
 800567a:	4798      	blx	r3
 800567c:	3601      	adds	r6, #1
 800567e:	e7f2      	b.n	8005666 <__libc_init_array+0x1e>
 8005680:	08005834 	.word	0x08005834
 8005684:	08005834 	.word	0x08005834
 8005688:	08005834 	.word	0x08005834
 800568c:	08005838 	.word	0x08005838

08005690 <memcmp>:
 8005690:	b510      	push	{r4, lr}
 8005692:	3901      	subs	r1, #1
 8005694:	4402      	add	r2, r0
 8005696:	4290      	cmp	r0, r2
 8005698:	d101      	bne.n	800569e <memcmp+0xe>
 800569a:	2000      	movs	r0, #0
 800569c:	e005      	b.n	80056aa <memcmp+0x1a>
 800569e:	7803      	ldrb	r3, [r0, #0]
 80056a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80056a4:	42a3      	cmp	r3, r4
 80056a6:	d001      	beq.n	80056ac <memcmp+0x1c>
 80056a8:	1b18      	subs	r0, r3, r4
 80056aa:	bd10      	pop	{r4, pc}
 80056ac:	3001      	adds	r0, #1
 80056ae:	e7f2      	b.n	8005696 <memcmp+0x6>

080056b0 <memcpy>:
 80056b0:	440a      	add	r2, r1
 80056b2:	4291      	cmp	r1, r2
 80056b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80056b8:	d100      	bne.n	80056bc <memcpy+0xc>
 80056ba:	4770      	bx	lr
 80056bc:	b510      	push	{r4, lr}
 80056be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c6:	4291      	cmp	r1, r2
 80056c8:	d1f9      	bne.n	80056be <memcpy+0xe>
 80056ca:	bd10      	pop	{r4, pc}

080056cc <memset>:
 80056cc:	4402      	add	r2, r0
 80056ce:	4603      	mov	r3, r0
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d100      	bne.n	80056d6 <memset+0xa>
 80056d4:	4770      	bx	lr
 80056d6:	f803 1b01 	strb.w	r1, [r3], #1
 80056da:	e7f9      	b.n	80056d0 <memset+0x4>

080056dc <_init>:
 80056dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056de:	bf00      	nop
 80056e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e2:	bc08      	pop	{r3}
 80056e4:	469e      	mov	lr, r3
 80056e6:	4770      	bx	lr

080056e8 <_fini>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr
